<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ixxat.Vci4.Contract</name>
    </assembly>
    <members>
        <member name="T:Ixxat.Vci4.Bal.Can.CanBitrateMode">
            <summary>
            Bitrate mode flags
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanBitrateMode.None">
            <summary>
              No CanBitrateMode is set. This is the default behaviour.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanBitrateMode.Raw">
            <summary>
              Raw mode, all values will be written directly into the 
              can controller's registers
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanBitrateMode.TripleSampling">
            <summary>
              Triple sampling mode
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanBitrate">
            <summary>
              Instances of <c>CanBitrate</c> represent a bit rate for CAN busses.
              A CAN bit rate is defined of two bit timing register values: Btr0 and 
              Btr1.
              The standardized CiA bit timing register values are provided as static 
              <c>CanBitrate</c> members like <c>Cia250KBit</c>.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate.#ctor(System.Byte,System.Byte)">
            <summary>
              Constructor for a new CanBitrate.
            </summary>
            <param name="bitTimingRegister0">
              Value for bit timing register 0
            </param>
            <param name="bitTimingRegister1">
              Value for bit timing register 1
            </param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate.#ctor(System.Byte,System.Byte,System.String)">
            <summary>
              Constructor for a new CanBitrate.
            </summary>
            <param name="bitTimingRegister0">
              Value for bit timing register 0
            </param>
            <param name="bitTimingRegister1">
              Value for bit timing register 1
            </param>
            <param name="name">
              Human readable name of the bit rate.
            </param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate.ToString">
            <summary>
              This method returns a String that represents the current timing value.
            </summary>
            <returns>
              A String that represents the current bit timing value.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate.Equals(System.Object)">
            <summary>
              Determines whether the specified Object is equal to the current Object.
            </summary>
            <pararm name ="obj">
              The Object to compare with the current Object.
            </pararm>
            <returns>
              true if the specified Object is equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate.Equals(Ixxat.Vci4.Bal.Can.CanBitrate)">
            <summary>
              Determines whether the specified Object is equal to the current Object.
            </summary>
            <pararm name ="other">
              The Object to compare with the current Object.
            </pararm>
            <returns>
              true if the specified Object is equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate.op_Equality(Ixxat.Vci4.Bal.Can.CanBitrate,Ixxat.Vci4.Bal.Can.CanBitrate)">
            <summary>
              Comparison operator ==
            </summary>
            <pararm name ="lhs">
              left hand side object to compare
            </pararm>
            <pararm name ="rhs">
              right hand side object to compare
            </pararm>
            <returns>
              true if the specified Object is equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate.op_Inequality(Ixxat.Vci4.Bal.Can.CanBitrate,Ixxat.Vci4.Bal.Can.CanBitrate)">
            <summary>
              Comparison operator !=
            </summary>
            <pararm name ="lhs">
              left hand side object to compare
            </pararm>
            <pararm name ="rhs">
              right hand side object to compare
            </pararm>
            <returns>
              true if the specified Object is not equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate.GetHashCode">
            <summary>
              Serves as a hash function for a particular type. GetHashCode is suitable 
              for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
              A hash code for the current Object. 
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Btr0">
            <summary>
              Gets the value of the bus timing register 0. The value corresponds to 
              the BTR0 register of the Phillips SJA 1000 CAN controller with a cycle 
              frequency of 16 MHz. Further information on this is given in the 
              data sheet of the SJA 1000.
            </summary>
            <returns>
              Value for the bit timing register 0.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Btr1">
            <summary>
              Gets the value of the bus timing register 1. The value corresponds to 
              the BTR1 register of the Phillips SJA 1000 CAN controller with a cycle 
              frequency of 16 MHz. Further information on this is given in the 
              data sheet of the SJA 1000.
            </summary>
            <returns>
              Value for the bit timing register 1.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.AsInt16">
            <summary>
              Gets the 16 bit value of this CanBitrate structure.
            </summary>
            <returns>
              The 16 bit value of this CanBitrate structure.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Bittime">
            <summary>
              Gets the bit time of this CanBitrate.
              (Bit time of this CanBitrate in clock ticks according to SJA1000.)
            </summary>
            <returns>
              Bit time of this CanBitrate in clock ticks according to SJA1000.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Name">
            <summary>
              Gets the name of this bitrate.
            </summary>
            <returns>
              The name of this bitrate.
            </returns>
            <remarks>
              This property returns either the user defined name of the bit rate,
              if the bit rate was created with a name, or the name of the known
              bit rate. For custom bit rates without a user defined name, the
              property returns the bit timing value as numeric string.
            </remarks>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Empty">
            <summary>
              Gets an empty bit timing value.
            </summary>
            <returns>
              Empty bit timing value.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Cia10KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 10 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 10 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Cia20KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 20 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 20 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Cia50KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 50 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 50 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Cia125KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 125 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 125 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Cia250KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 250 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 250 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Cia500KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 500 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 500 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Cia800KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 800 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 800 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.Cia1000KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 1000 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 1000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate._100KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 100 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 100 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate.CiaBitRates">
            <summary>
              Gets an array of all available CiA baud rates.
            </summary>
            <returns>
              Array of all available CiA baud rates.
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanBitrate2">
            <summary>
              Instances of <c>CanBitrate2</c> represent a bit rate for CAN and CAN-FD 
              busses. A CAN/CAN-FD bit rate is defined of 6 bit timing register values: 
              Mode, Prescaler, TimeSegment1, TimeSegment2, SJW and TransmitterDelay.
              The standardized CiA bit timing register values are provided as static 
              <c>CanBitrate2</c> members like <c>Cia250KBit</c>.
            </summary>
            <example>
            <code>
               normal mode
              
              |------- Tbit ---------|
              +------+-------+-------+
              | SYNC | TSEG1 | TSEG2 |
              +------+---- --+-------+
              |     wTS1     | wTS2  |
              +--------------+-------+
                             |
                             +-> Sample Point
              
              raw mode
              
              |-------- Tbit --------|
              +------+-------+-------+
              | SYNC | TSEG1 | TSEG2 |
              +------+-------+-------+
              |  1   |  wTS1 |  wTS2 |
              +------+-------+-------+
                             |
                             +-> Sample Point
              
              SYNC  := Re-Synchronisation Segment
              TSEG1 := Time Segment 1
              TSEG2 := Time Segment 2
              
            </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate2.#ctor(Ixxat.Vci4.Bal.Can.CanBitrateMode,System.UInt32,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
              Constructor for a new CanBitrate2.
            </summary>
            <param name="BittimingMode">
              Value for bit timing register 0.
            </param>
            <param name="Prescaler">
              Bits per second or prescaler (see <c>CanBitrateMode</c>).
            </param>
            <param name="TimeSegment1">
              Length of time segment 1 in quantas.
            </param>
            <param name="TimeSegment2">
              Length of time segment 2 in quantas.
            </param>
            <param name="Sjw">
              Re-synchronisation jump width in quantas.
            </param>
            <param name="TranmitterDelay">
              Transceiver delay compensation offset in quantas.
              (0 = disabled)
            </param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate2.#ctor(Ixxat.Vci4.Bal.Can.CanBitrateMode,System.UInt32,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
              Constructor for a new CanBitrate2.
            </summary>
            <param name="BittimingMode">
              Value for bit timing register 0.
            </param>
            <param name="Prescaler">
              Bits per second or prescaler (see <c>CanBitrateMode</c>).
            </param>
            <param name="TimeSegment1">
              Length of time segment 1 in quantas.
            </param>
            <param name="TimeSegment2">
              Length of time segment 2 in quantas.
            </param>
            <param name="Sjw">
              Re-synchronisation jump width in quantas.
            </param>
            <param name="TranmitterDelay">
              Transceiver delay compensation offset in quantas.
              (0 = disabled)
            </param>
            <param name="name">
              Human readable name of the bit rate. 
            </param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate2.ToString">
            <summary>
              This method returns a String that represents the current timing value.
            </summary>
            <returns>
              A String that represents the current bit timing value.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate2.Equals(System.Object)">
            <summary>
              Determines whether the specified Object is equal to the current Object.
            </summary>
            <pararm name ="obj">
              The Object to compare with the current Object.
            </pararm>
            <returns>
              true if the specified Object is equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate2.Equals(Ixxat.Vci4.Bal.Can.CanBitrate2)">
            <summary>
              Determines whether the specified Object is equal to the current Object.
            </summary>
            <pararm name ="other">
              The Object to compare with the current Object.
            </pararm>
            <returns>
              true if the specified Object is equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate2.op_Equality(Ixxat.Vci4.Bal.Can.CanBitrate2,Ixxat.Vci4.Bal.Can.CanBitrate2)">
            <summary>
              Comparison operator ==
            </summary>
            <pararm name ="lhs">
              left hand side object to compare
            </pararm>
            <pararm name ="rhs">
              right hand side object to compare
            </pararm>
            <returns>
              true if the specified Object is equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate2.op_Inequality(Ixxat.Vci4.Bal.Can.CanBitrate2,Ixxat.Vci4.Bal.Can.CanBitrate2)">
            <summary>
              Comparison operator !=
            </summary>
            <pararm name ="lhs">
              left hand side object to compare
            </pararm>
            <pararm name ="rhs">
              right hand side object to compare
            </pararm>
            <returns>
              true if the specified Object is not equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanBitrate2.GetHashCode">
            <summary>
              Serves as a hash function for a particular type. GetHashCode is suitable 
              for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
              A hash code for the current Object. 
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Mode">
            <summary>
              Gets the value of the bittiming mode. Mode can be native values, which 
              will be written directly to the can controller register or logical values
              which contains the bitrate and the sample point. These values will
              be recalculated by the driver to match the can controller's settings.
            </summary>
            <returns>
              Value for the bittiming mode.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Prescaler">
            <summary>
              Gets the value of the prescaler.
            </summary>
            <returns>
              Value for the prescaler.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.TimeSegment1">
            <summary>
              Gets the value of the bus timing segment 1. The value is scaled in
              can time quantas for the specific prescaler.
            </summary>
            <returns>
              Value for the bit timing segment 1.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.TimeSegment2">
            <summary>
              Gets the value of the bus timing segment 2. The value is scaled in
              can time quantas for the specific prescaler.
            </summary>
            <returns>
              Value for the bit timing segment 2.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Sjw">
            <summary>
              Gets the value of the synchronisation jump bit width. The value is scaled in
              can time quantas for the specific prescaler.
            </summary>
            <returns>
              Value for the synchronisation jump bit width.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.TransmitterDelay">
            <summary>
              Gets the value of the transmitter delay offset. The value is scaled in
              can time quantas for the specific prescaler.
            </summary>
            <returns>
              Value for the transmitter delay offset.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Bittime">
            <summary>
              Gets the bit time of this CanBitrate2.
              (Bit time of this CanBitrate2 in clock ticks according to SJA1000.)
            </summary>
            <returns>
              Bit time of this CanBitrate2 in clock ticks according to SJA1000.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Name">
            <summary>
              Gets the name of this CanBitrate2.
            </summary>
            <returns>
              The name of this bitrate.
            </returns>
            <remarks>
              This property returns either the user defined name of the bit rate,
              if the bit rate was created with a name, or the name of the known
              bit rate. For custom bit rates without a user defined name, the
              property returns the bit timing value as numeric string.
            </remarks>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Empty">
            <summary>
              Gets an empty bit timing value.
            </summary>
            <returns>
              Empty bit timing value.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Cia10KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 10 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 10 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Cia20KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 20 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 20 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Cia50KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 50 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 50 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Cia125KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 125 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 125 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Cia250KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 250 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 250 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Cia500KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 500 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 500 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Cia800KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 800 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 800 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.Cia1000KBit">
            <summary>
              Gets the bit timing value for the predefined CiA bit rate of 1000 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined CiA 1000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2._100KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 100 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 100 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.IFI833KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 833 kbit/s.
              (raw, IFI CAN-FD specific)
            </summary>
            <returns>
              Bit timing value for the predefined 833 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.IFI1000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 1000 kbit/s.
              (raw, IFI CAN-FD specific)
            </summary>
            <returns>
              Bit timing value for the predefined 1000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.IFI2000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 2000 kbit/s.
              (raw, IFI CAN-FD specific)
            </summary>
            <returns>
              Bit timing value for the predefined 2000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.IFI4000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 4000 kbit/s.
              (raw, IFI CAN-FD specific)
            </summary>
            <returns>
              Bit timing value for the predefined 4000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.IFI5000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 5000 kbit/s.
              (raw, IFI CAN-FD specific)
            </summary>
            <returns>
              Bit timing value for the predefined 5000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.IFI6667KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 6667 kbit/s.
              (raw, IFI CAN-FD specific)
            </summary>
            <returns>
              Bit timing value for the predefined 6667 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.IFI8000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 8000 kbit/s.
              (raw, IFI CAN-FD specific)
            </summary>
            <returns>
              Bit timing value for the predefined 8000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.IFI10000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 10000 kbit/s.
              (raw, IFI CAN-FD specific)
            </summary>
            <returns>
              Bit timing value for the predefined 10000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD250KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 250 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 250 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD500KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 500 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 500 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD833KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 833 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 833 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD1000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 1000 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 1000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD1538KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 1538 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 1538 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD2000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 2000 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 2000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD4000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 4000 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 4000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD5000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 5000 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 5000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD6667KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 6666 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 6666 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD8000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 8000 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 8000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CANFD10000KBit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 10000 kbit/s.
            </summary>
            <returns>
              Bit timing value for the predefined 10000 kbit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CanFdIFIBitRates">
            <summary>
              Gets an array of all available CANFD raw bit rates specific 
              for IFI CANFD controllers.
            </summary>
            <returns>
              Array of all available CiA baud rates.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CanFdBitRates">
            <summary>
              Gets an array of all available non raw CAN-FD bit rates.
            </summary>
            <returns>
              Array of all available non raw CAN-FD bit rates.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanBitrate2.CiaBitRates">
            <summary>
              Gets an array of all available CiA bit rates.
            </summary>
            <returns>
              Array of all available CiA bit rates.
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanFdBitrate">
            <summary>
              Instances of <c>CanFdBitrate</c> represent a CAN-FD bit rate.
              It consists of two bitrates, one for the standard bitrate (Sdr)
              and one for the fast bitrate (Fdr)
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanFdBitrate.#ctor(Ixxat.Vci4.Bal.Can.CanBitrate2,Ixxat.Vci4.Bal.Can.CanBitrate2)">
            <summary>
              Constructor for a CanFdBitrate.
            </summary>
            <param name="stdBitrate">
              Standard bitrate
            </param>
            <param name="fastBitrate">
              Fast bitrate
            </param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanFdBitrate.#ctor(Ixxat.Vci4.Bal.Can.CanBitrate2)">
            <summary>
              Copy constructor for a CanFdBitrate.
            </summary>
            <param name="bitrate">
              Bitrate to copy from
            </param>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanFdBitrate.StdBitrate">
            <summary>
            Property to get standard bitrate
            </summary>
            <returns>
              Standard bitrate.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanFdBitrate.FastBitrate">
            <summary>
            Property to get fast bitrate
            </summary>
            <returns>
              Fast bitrate.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanFdBitrate.CiaBitRates">
            <summary>
              Gets an array of all available CAN CiA fast data bitrates.
            </summary>
            <returns>
              Array of all available CiA baud rates.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanFdBitrate.ShortLineCANFDBitRates">
            <summary>
              Gets an array of common CANFD bitrates for short lines
            </summary>
            <returns>
              Array of all available CiA baud rates.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanFdBitrate.LongLineCANFDBitRates">
            <summary>
              Gets an array of common CANFD bitrates for long lines
            </summary>
            <returns>
              Array of all available CiA baud rates.
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanChannelStatus">
            <summary>
              <c>CanChannelStatus</c> represents the status of a CAN channel.
              See interface <c>ICanChannel</c>.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanChannelStatus.#ctor(System.Boolean,System.Boolean,System.Byte,System.Byte)">
            <summary>
            Ctor - create a CanChannelStatus object
            </summary>
            <param name="activated">activated flag</param>
            <param name="rxOverrun">overrun flag</param>
            <param name="rxFifoLoad">rx fifo load</param>
            <param name="txFifoLoad">rx fifo load</param>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanChannelStatus.IsActivated">
            <summary>
              Gets a value indicating whether the channel is activated.
            </summary>
            <returns>
              true if the channel is activated, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanChannelStatus.HasFifoOverrun">
            <summary>
              Gets a value indicating if a message was lost because there was
              not enough free space for the message in the receive FIFO.
            </summary>
            <returns>
              true if a data overrun has occured, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanChannelStatus.ReceiveFifoLoad">
            <summary>
              Gets the current load level of the receive FIFO in percent.
            </summary>
            <returns>
              Current load level of the receive FIFO in percent (0...100%).
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanChannelStatus.TransmitFifoLoad">
            <summary>
              Gets the current load level of the transmit FIFO in percent.
            </summary>
            <returns>
              Current load level of the transmit FIFO in percent (0...100%).
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanOperatingModes">
            <summary>
              Enumeration of flag values that are used to specify or signalize the 
              operating mode of a CAN controller (see <c>CanLineStatus</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanOperatingModes.Undefined">
            <summary>
              Undefined
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanOperatingModes.Standard">
            <summary>
              Reception of 11-bit id messages
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanOperatingModes.Extended">
            <summary>
              Reception of 29-bit id messages
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanOperatingModes.ModeMask">
            <summary>
              Mask to decide between Standard/Extended/Undefined mode
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanOperatingModes.ErrFrame">
            <summary>
              Enable reception of error frames
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanOperatingModes.ListenOnly">
            <summary>
              Listen only mode (TX passive)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanOperatingModes.LowSpeed">
            <summary>
              Use low speed bus interface
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanOperatingModes.AutoBaudrate">
            <summary>
              autmatic bit rate detection
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanExtendedOperatingModes">
            <summary>
              Enumeration of flag values that are used to specify or signalize the 
              extended operating mode of a CAN controller (see <c>CanLineStatus2</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanExtendedOperatingModes.Undefined">
            <summary>
              No extended operation
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanExtendedOperatingModes.ExtendedDataLength">
            <summary>
              Extended data length
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanExtendedOperatingModes.FastDataRate">
            <summary>
              Fast data bit rate
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanExtendedOperatingModes.NonIsoCanFd">
            <summary>
              non-ISO conform CAN-FD frame
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanCtrlStatus">
            <summary>
              Enumeration of flag values that are used to signalize the status mode of
              a CAN controller (see <c>CanLineStatus</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlStatus.TxPending">
            <summary>
              Transmission pending
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlStatus.Overrun">
            <summary>
              Data overrun occurred
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlStatus.ErrLimit">
            <summary>
              Error warning limit exceeded
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlStatus.BusOff">
            <summary>
              Bus off status
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlStatus.InInit">
            <summary>
              Init mode active
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlStatus.BusCErr">
            <summary>
              Bus coupling error
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanLineStatus">
            <summary>
              <c>CanLineStatus</c> is used to signalize the status of a CAN 
              controller. See interface <c>ICanSocket</c>.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanLineStatus.#ctor(Ixxat.Vci4.Bal.Can.CanOperatingModes,System.Byte,Ixxat.Vci4.Bal.Can.CanCtrlStatus,Ixxat.Vci4.Bal.Can.CanBitrate)">
            <summary>
              Ctor - create a CanLineStatus object
            </summary>
            <param name="opmode">operating mode</param>
            <param name="busload">bus load</param>
            <param name="ctrlstat">controller status</param>
            <param name="rate">bitrate</param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanLineStatus.ToString">
            <summary>
              This method returns a String that represents the current timing value.
            </summary>
            <returns>
              A String that represents the current bit timing value.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.OperatingMode">
            <summary>
              Gets the current operating mode of the CAN controller.
            </summary>
            <returns>
              The current operating mode of the CAN controller.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsModeUndefined">
            <summary>
              Gets a value indicating whether the CAN controller is currently
              operating in standard (11-bit) frame mode.
            </summary>
            <returns>
              true if the CAN controller is currently operating in standard frame 
              mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsModeStandard">
            <summary>
              Gets a value indicating whether the CAN controller is currently
              operating in standard (11-bit) frame mode.
            </summary>
            <returns>
              true if the CAN controller is currently operating in standard frame 
              mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsModeExtended">
            <summary>
              Gets a value indicating whether the CAN controller is currently
              operating in extended (29-bit) frame mode.
            </summary>
            <returns>
              true if the CAN controller is currently operating in extended frame 
              mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsErrorFramesEnabled">
            <summary>
              Gets a value indicating if the reception of error frames is currently 
              enabled.
            </summary>
            <returns>
              true if the reception of error frames is currently enabled,
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsListenOnly">
            <summary>
             Gets a value indicating whether the CAN controller is currently
             operating in listen only mode.
            </summary>
            <returns>
              true if the CAN controller is currently operating in listen only mode, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsLowSpeedEnabled">
            <summary>
             Gets a value indicating whether the CAN controller uses the
             low speed bus interface.
            </summary>
            <returns>
              true if the CAN controller uses the low speed bus interface, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsAutomaticBitrateDetectionEnabled">
            <summary>
             Gets a value indicating whether the CAN controller uses the
             automatic bitrate detection.
            </summary>
            <returns>
              true if the CAN controller uses the automatic bitrate detection, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.Bitrate">
            <summary>
             Gets the current bit timing value of the CAN controller.
            </summary>
            <returns>
              Current CAN bit timing.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.ControllerStatus">
            <summary>
              Gets the current CAN controller status.
            </summary>
            <returns>
              Current CAN controller status.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsTransmitPending">
            <summary>
              Gets a value indicating if the CAN controller is currently
              transmitting (sending) a CAN message.
            </summary>
            <returns>
              true if the CAN controller is currently transmitting a CAN message, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.HasDataOverrun">
            <summary>
              Gets a value indicating if a message was lost because there was
              not enough free space for the message in the CAN controllers
              internal message buffer.
            </summary>
            <returns>
              true if a data overrun has occurred, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.HasErrorOverrun">
            <summary>
              Gets a value indicating if a error counter has reached or
              exceeded the predefined error warning limit.
            </summary>
            <returns>
              true if an error counter has reached or exceeded the predefined error 
              warning limit, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsBusOff">
            <summary>
              Gets a value indicating whether the CAN controller is involved
              in bus activities.
            </summary>
            <returns>
              true if the CAN controller is not involved in bus activities, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsInInitMode">
            <summary>
              Gets a value indicating whether the CAN controller is currently in init 
              mode.
            </summary>
            <returns>
              true if the CAN controller is in init mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.IsBusCErr">
            <summary>
              Gets a value indicating that the CAN controller signals an Error on his
              bus coupling
            </summary>
            <returns>
              true if bus coupling error on the CAN controller is signaled,
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus.Busload">
            <summary>
              Gets the current bus load (0...100%).
            </summary>
            <returns>
              Current bus load (0...100%).
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanLineStatus2">
            <summary>
              <c>CanLineStatus2</c> is used to signalize the status of a CAN 
              controller. See interface <c>ICanSocket2</c>.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanLineStatus2.#ctor(Ixxat.Vci4.Bal.Can.CanOperatingModes,Ixxat.Vci4.Bal.Can.CanExtendedOperatingModes,System.Byte,Ixxat.Vci4.Bal.Can.CanCtrlStatus,Ixxat.Vci4.Bal.Can.CanBitrate2,Ixxat.Vci4.Bal.Can.CanBitrate2)">
            <summary>
              Ctor - create a CanLineStatus2 object
            </summary>
            <param name="opmode">operating mode</param>
            <param name="exmode">extended operating mode</param>
            <param name="busload">bus load</param>
            <param name="ctrlstat">controller status</param>
            <param name="rate">bitrate</param>
            <param name="fastrate">fast bitrate</param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.CanLineStatus2.ToString">
            <summary>
              This method returns a String that represents the current timing value.
            </summary>
            <returns>
              A String that represents the current bit timing value.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.OperatingMode">
            <summary>
              Gets the current operating mode of the CAN controller.
            </summary>
            <returns>
              The current operating mode of the CAN controller.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.ExtendedOperatingMode">
            <summary>
              Gets the current operating mode of the CAN controller.
            </summary>
            <returns>
              The current operating mode of the CAN controller.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsStdModeEnabled">
            <summary>
              Gets a value indicating whether the CAN controller is currently
              operating in standard (11-bit) frame mode.
            </summary>
            <returns>
              true if the CAN controller is currently operating in standard frame 
              mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsExtModeEnabled">
            <summary>
              Gets a value indicating whether the CAN controller is currently
              operating in extended (29-bit) frame mode.
            </summary>
            <returns>
              true if the CAN controller is currently operating in extended frame 
              mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsErrModeEnabled">
            <summary>
              Gets a value indicating if the reception of error frames is currently 
              enabled.
            </summary>
            <returns>
              true if the reception of error frames is currently enabled,
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsListenOnly">
            <summary>
             Gets a value indicating whether the CAN controller is currently
             operating in listen only mode.
            </summary>
            <returns>
              true if the CAN controller is currently operating in listen only mode, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsLowSpeedEnabled">
            <summary>
             Gets a value indicating whether the CAN controller uses the
             low speed bus interface.
            </summary>
            <returns>
              true if the CAN controller uses the low speed bus interface, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsAutomaticBitrateDetectionEnabled">
            <summary>
             Gets a value indicating whether the CAN controller uses the
             automatic bitrate detection.
            </summary>
            <returns>
              true if the CAN controller uses the automatic bitrate detection, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsExtendedDataLengthEnabled">
            <summary>
             Gets a value indicating whether the CAN controller uses the
             extended data length.
            </summary>
            <returns>
              true if the CAN controller uses the extended data length, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsFastDataEnabled">
            <summary>
             Gets a value indicating whether the CAN controller uses the
             fast data bit rate.
            </summary>
            <returns>
              true if the CAN controller uses the fast data bit rate, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsNonIsoCanFdEnabled">
            <summary>
             Gets a value indicating whether the CAN controller uses the
             ISO can fd standard.
            </summary>
            <returns>
              true if the CAN controller uses the ISO can fd standard, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.Bitrate">
            <summary>
             Gets the current bit timing value of the CAN controller.
            </summary>
            <returns>
              Current CAN bit timing.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.FastBitrate">
            <summary>
             Gets the current extended bit timing value of the CAN controller.
            </summary>
            <returns>
              Current extended CAN bit timing.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.ControllerStatus">
            <summary>
              Gets the current CAN controller status.
            </summary>
            <returns>
              Current CAN controller status.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsTransmitPending">
            <summary>
              Gets a value indicating if the CAN controller is currently
              transmitting (sending) a CAN message.
            </summary>
            <returns>
              true if the CAN controller is currently transmitting a CAN message, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.HasDataOverrun">
            <summary>
              Gets a value indicating if a message was lost because there was
              not enough free space for the message in the CAN controllers
              internal message buffer.
            </summary>
            <returns>
              true if a data overrun has occured, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.HasErrorOverrun">
            <summary>
              Gets a value indicating if a error counter has reached or
              exceeded the predefined error warning limit.
            </summary>
            <returns>
              true if an error counter has reached or exceeded the predefined error 
              warning limit, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsBusOff">
            <summary>
              Gets a value indicating whether the CAN controller is involved
              in bus activities.
            </summary>
            <returns>
              true if the CAN controller is not involved in bus activities, 
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsInInitMode">
            <summary>
              Gets a value indicating whether the CAN controller is currently in init 
              mode.
            </summary>
            <returns>
              true if the CAN controller is in init mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.IsBusCErr">
            <summary>
              Gets a value indicating that the CAN controller signals an Error on his
              bus coupling
            </summary>
            <returns>
              true if bus coupling error on the CAN controller is signaled,
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.CanLineStatus2.Busload">
            <summary>
              Gets the current bus load (0...100%).
            </summary>
            <returns>
              Current bus load (0...100%).
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.Bal.IBalObject">
            <summary>
              This interface represents a BAL (Bus Access Layer) object.
              When no longer needed the BAL object has to be disposed using the 
              IDisposable interface. 
              Get the BAL object of a device by using method 
              <c>IVciDevice.OpenBusAccessLayer()</c>.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IVciDevice device = ...
              IBalObject bal = device.OpenBusAccessLayer();
              // Use bal here
              // ...
              // Dispose object to release native resources
              bal.Dispose();
              device.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.IBalObject.OpenSocket(System.Byte,System.Type)">
             <summary>
               This method opens the specified bus socket.
             </summary>
             <param name="portNumber">
               Number of the bus socket to open. This parameter must be within the 
               range of 0 to <c>Resources.Count</c> - 1.
             </param>
             <param name="socketType">
               Type of the bus socket to open. The supported socket types
               are depending on the <c>BusType</c> of the BAL resource specified by the 
               <c>portNumber</c> parameter.
               I.e. for a CAN bus socket the following <c>socketTypes</c> are supported:
                 ICanSocket, 
                 ICanControl, 
                 ICanChannel, 
                 ICanScheduler.
               It's possible have several socketType open at the same time (i.e.
               ICanControl and ICanChannel).
             </param>
             <returns>
               If the method succeeds it returns the opened bus socket object as 
               <c>IBalResource</c> reference. This reference can be casted to
               the type specified by parameter <paramref name="socketType"/>.
               If the method fails it returns a null reference (Nothing in
               VisualBasic).
               When no longer needed the returned socket object has to be disposed using 
               the IDisposable interface. 
             </returns>
             <remarks>
               The type of the bus socket is implicitly specified by the
               <c>portNumber</c> parameter (see <c>IBalResource.BusType</c> property).
            
               The VCI interfaces provide access to native driver resources. Because the 
               .NET garbage collector is only designed to manage memory, but not 
               native OS and driver resources the caller is responsible to release this 
               resources via calling <c>IDisposable.Dispose()</c> when the object is no 
               longer needed. Otherwise native memory and resource leaks may occure.
             </remarks>
             <exception cref="T:Ixxat.Vci4.VciException">
               Opening socket failed.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               Object is already disposed.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The specified port number is out of range.
             </exception>
             <exception cref="T:System.NotImplementedException">
               There's no implementation for the specified <paramref name="socketType"/>.
             </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.IBalObject.FirmwareVersion">
            <summary>
              Gets the firmware version.
            </summary>
            <returns>
              The firmware version.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.IBalObject.Resources">
            <summary>
              Gets a <c>BalResourceCollection</c> that can be used to iterate through
              the available BAL resources or to directly access such one via a
              collection index.
            </summary>
            <returns>
              A reference to the collection of BAL resources.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.IBalResource">
            <summary>
              <c>IBalResource</c> is used in two manners: On one hand it represents the 
              physical existance of field bus controlles via property 
              <c>IBalObject.Resources</c>. 
              On the other hand it's the base interface for several functional socket 
              interfaces that can be opened via method <c>IBalObject.OpenSocket</c>.
              When no longer needed the BAL object has to be disposed using the 
              IDisposable interface. 
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
        </member>
        <member name="P:Ixxat.Vci4.Bal.IBalResource.BusPort">
            <summary>
              Gets the port number of the BAL bus socket.
            </summary>
            <returns>
              The port number of the BAL bus socket.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.IBalResource.BusType">
            <summary>
              Gets the bus type of the BAL bus socket.
            </summary>
            <returns>
              The bus type of the BAL bus socket.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.IBalResource.BusName">
            <summary>
              Gets the name of the bus.
            </summary>
            <returns>
              If succeeded the name of the bus.
              If failed a null reference (Nothing in Visual Basic).
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.Bal.BalResourceCollection">
            <summary>
              This class implements the BAL resource collection. It can be used
              to iterate through the available BAL resources or to directly access
              one via it's collection index.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.BalResourceCollection.#ctor(Ixxat.Vci4.Bal.IBalResource[])">
            <summary>
            Create a BalResourceCollection from a given IBalResource array.
            </summary>
            <param name="resources">Array of IBalResource interfaces</param>
        </member>
        <member name="P:Ixxat.Vci4.Bal.BalResourceCollection.Item(System.Int32)">
             <summary>
               Get's the BAL socket identified by the specified collection index.
             </summary>
             <param name="index">
               Index of the requested BAL socket within this collection of BAL 
               sockets.
            </param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               The specified index is not a valid index in the list.
             </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanChannel">
            <summary>
              This interface represents a CAN communication channel and is used to 
              receive and transmit CAN messages.
              When no longer needed the CAN communication channel object has to be 
              disposed using the IDisposable interface. 
              A CAN communication channel can be got via method 
              <c>IBalObject.OpenSocket()</c>. Unless the CAN socket is not already 
              in use exclusively, it's possible to open several concurrently 
              communication channels on the same socket.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open communication channel on first CAN socket
              ICanChannel channel = bal.OpenSocket(0, typeof(ICanChannel)) as ICanChannel;
              
              // Initialize channel non-exclusively
              channel.Initialize(100, 100, false);
              
              // Use channel
              // ...
              
              // Dispose channel an BAL
              channel.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanSocket">
            <summary>
              <c>ICanSocket</c> provides the properties and capabilities of a
              CAN controller.
              When no longer needed the CAN contol object has to be disposed using the 
              IDisposable interface. 
              A CAN socket object can be got via method <c>IBalObject.OpenSocket()</c>.
              Additionally <c>ICanSocket</c> is the base interface for several other
              CAN bus specific socket interfaces like <c>ICanControl</c>,
              <c>ICanScheduler</c> and <c>ICanChannel</c>.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open first CAN socket
              ICanSocket socket = bal.OpenSocket(0, typeof(ICanSocket)) as ICanSocket;
              
              // Use socket
              // ...
              
              // Dispose socket an BAL
              socket.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.ControllerType">
            <summary>
              Gets the type of controller used by the CAN socket.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.BusCoupling">
            <summary>
              Gets the type of bus coupling used by the CAN controller.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.ClockFrequency">
            <summary>
              Gets the frequency to the primary timer in Hz.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.TimeStampCounterDivisor">
            <summary>
              Gets the divisor factor of the time stamp counter. 
              The time stamp counter provides the time stamp for CAN messages. 
              The frequency of the time stamp counter is calculated from the frequency 
              of the primary timer (<c>ClockFrequency</c>) divided by the value 
              specified here.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.CyclicMessageTimerDivisor">
            <summary>
              Gets the divisor factor for the timer of the cyclic transmit list
              (See <c>ICanScheduler</c>. The frequency of this timer is calculated 
              from the frequency of the primary timer (<c>ClockFrequency</c>) divided 
              by the value specified here. If no cyclic transmit list is available, 
              property <c>CyclicMessageTimerDivisor</c> has the value 0.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.MaxCyclicMessageTicks">
            <summary>
              Gets the maximum cycle time of the CAN message scheduler in number of 
              ticks.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.DelayedTXTimerDivisor">
            <summary>
              Gets the divisor factor for the timer used for delayed transmission of 
              messages. The frequency of this timer is calculated from the frequency 
              of the primary timer (<c>ClockFrequency</c>) divided by the value 
              specified here. If delayed transmission is not supported by the 
              adapter, property <c>DelayedTXTimerDivisor</c> has the value 0.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.MaxDelayedTXTicks">
            <summary>
              Gets the maximum delay time of the delayed CAN message transmitter in 
              number of ticks.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.LineStatus">
            <summary>
              Gets the current status of the CAN line.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting CAN line status failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.Features">
            <summary>
              Gets a flag field indicating the features supported by the CAN 
              controller.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsStdOrExtFrames">
            <summary>
              Gets a value indicating if the CAN socket supports standard (11-bit) 
              and extended (29-bit) format exclusively.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsStdAndExtFrames">
            <summary>
              Gets a value indicating if the CAN socket supports standard (11-bit) 
              and extended (29-bit) message frames simultanously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsRemoteFrames">
            <summary>
              Gets a value indicating if the CAN socket supports remote transfer 
              requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsErrorFrames">
            <summary>
              Gets a value indicating if the CAN socket supports error frames.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsBusLoadComputation">
            <summary>
              Gets a value indicating if the CAN socket supports bus load computation.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsExactMessageFilter">
            <summary>
              Gets a value indicating if the CAN socket supports exact filtering of 
              CAN messages.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsListenOnlyMode">
            <summary>
              Gets a value indicating if the CAN socket supports listen only mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsCyclicMessageScheduler">
            <summary>
              Gets a value indicating if the CAN socket supports a cyclic message 
              scheduler.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsErrorFrameGeneration">
            <summary>
              Gets a value indicating if the CAN socket supports the generation of 
              error message frames.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket.SupportsDelayedTransmission">
            <summary>
              Gets a value indicating if the CAN socket supports delayed transmission 
              of CAN message frames.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel.GetMessageReader">
            <summary>
              Gets a reference to a new instance of a message reader object for the 
              channel. This message reader provides access to the channel's receive 
              buffer.
              CAN messages received from the CAN line can be read from this object.
            </summary>
            <returns>
              A reference to the message reader of the channel.
              When no longer needed the message reader object has to be 
              disposed using the IDisposable interface. 
            </returns>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting the message reader failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel.GetMessageWriter">
            <summary>
              Gets a reference to a new instance of a message writer object for the 
              channel. THis message writer provides access to the channel's transmit 
              buffer.
              CAN messages written to this transmit buffer are transmitted over the 
              CAN line.
            </summary>
            <returns>
              A reference to the message writer of the channel.
              When no longer needed the message writer object has to be 
              disposed using the IDisposable interface. 
            </returns>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting the message writer failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel.Initialize(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
              This method initializes the CAN channel. This method must be called
              prior to any other method of the interface.
            </summary>
            <param name="receiveFifoSize">
              Size of the receive buffer (number of CAN messages)
            </param>
            <param name="transmitFifoSize">
              Size of the transmit buffer (number  of CAN messages)
            </param>
            <param name="exclusive">
              If this parameter is set to true the method tries
              to initialize the channel for exclusive use. If set
              to false, the method initializes the channel for
              shared access.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Channel initialization failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
            <remarks>
              The channel is deactivated after this method returns an must be
              activeted by an Activate() method call.
              The method can be called more than once to reconfigure the size
              of the receive or transmit FIFOs.
            </remarks>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel.Activate">
            <summary>
              This method activates the CAN channel. After activating the channel,
              CAN messages can be transmitted and received through the message writer
              and message reader.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Channel activation failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
            <remarks>
              The CAN line must be started, otherwise no messages are received or
              transmitted from/to the CAN line (see also ICanControl.StartLine).
            </remarks>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel.Deactivate">
            <summary>
              This method deactivates the CAN channel. After deactivating the channel,
              no further CAN messages are transmitted or received to/from the CAN line.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Channel deactivation failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanChannel.ChannelStatus">
            <summary>
              Gets the current status of the CAN channel.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting channel status failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanFilterModes">
            <summary>
              Enumeration of flag values that are used to specify or signalize the 
              operating mode of a CAN filter (see <c>CanChannel2</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFilterModes.Invalid">
            <summary>
              Invalid or unknown filter mode (do not use for initialization)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFilterModes.Lock">
            <summary>
              Lock filter (inhibit all IDs)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFilterModes.Pass">
            <summary>
              Bypass filter (pass all IDs)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFilterModes.Inclusive">
            <summary>
              Inclusive filtering (pass registered IDs)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFilterModes.Exclusive">
            <summary>
              Exclusive filtering (inhibit registered IDs)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFilterModes.PassSelfReceptions">
            <summary>
              Pass self-reception messages from all channels
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanChannel2">
            <summary>
              This interface represents a CAN communication channel and is used to 
              receive and transmit CAN messages.
              When no longer needed the CAN communication channel object has to be 
              disposed using the IDisposable interface. 
              A CAN communication channel can be got via method 
              <c>IBalObject.OpenSocket()</c>. Unless the CAN socket is not already 
              in use exclusively, it's possible to open several concurrently 
              communication channels on the same socket.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open communication channel on first CAN socket
              ICanChannel2 channel = bal.OpenSocket(0, typeof(ICanChannel2)) as ICanChannel2;
              
              // Initialize channel non-exclusively
              channel.Initialize(100, 100, 100, CanFilterModes.Pass, false);
              
              // Use channel
              // ...
              
              // Dispose channel an BAL
              channel.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanSocket2">
            <summary>
              <c>ICanSocket2</c> provides the properties and capabilities of a
              CAN-FD controller.
              When no longer needed the CAN control object has to be disposed using the 
              IDisposable interface. 
              A CAN socket object can be got via method <c>IBalObject.OpenSocket()</c>.
              Additionally <c>ICanSocket2</c> is the base interface for several other
              CAN bus specific socket interfaces like <c>ICanControl2</c>,
              <c>ICanScheduler2</c> and <c>ICanChannel2</c>.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open first CAN socket
              ICanSocket2 socket = bal.OpenSocket(0, typeof(ICanSocket2)) as ICanSocket2;
              
              // Use socket
              // ...
              
              // Dispose socket an BAL
              socket.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.ControllerType">
            <summary>
              Gets the type of controller used by the CAN socket.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.BusCoupling">
            <summary>
              Gets the type of bus coupling used by the CAN controller.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.Features">
            <summary>
              Gets a flag field indicating the features supported by the CAN 
              controller.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.CanClockFrequency">
            <summary>
              Gets the can clock frequency in Hz.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.MinimumArbitrationBitrate">
            <summary>
              Gets the minimum bit timing values for arbitration bit rate.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.MaximumArbitrationBitrate">
            <summary>
              Gets the maximum bit timing values for arbitration bit rate.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.MinimumFastDataBitrate">
            <summary>
              Gets the minimum bit timing values for fast data bit rate.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.MaximumFastDataBitrate">
            <summary>
              Gets the maximum bit timing values for fast data bit rate.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.TimeStampCounterClockFrequency">
            <summary>
              Gets the clock frequency of the time stamp counter [Hz]
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.TimeStampCounterDivisor">
            <summary>
              Gets the divisor factor of the time stamp counter. 
              The time stamp counter provides the time stamp for CAN messages. 
              The frequency of the time stamp counter is calculated from the frequency 
              of the can clock timer (<c>CanClockFrequency</c>) divided by the value 
              specified here.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.CyclicMessageTimerClockFrequency">
            <summary>
              Gets the clock frequency of cyclic message scheduler [Hz]
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.CyclicMessageTimerDivisor">
            <summary>
              Gets the divisor factor for the timer of the cyclic transmit list
              (See <c>ICanScheduler2</c>. The frequency of this timer is calculated 
              from the frequency of the can clock timer (<c>CanClockFrequency</c>) divided 
              by the value specified here. If no cyclic transmit list is available, 
              property <c>CyclicMessageTimerDivisor</c> has the value 0.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.MaxCyclicMessageTicks">
            <summary>
              Gets the maximum cycle time of the CAN message scheduler in number of 
              ticks.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.DelayedTXTimerClockFrequency">
            <summary>
              Gets the clock frequency of the delayed message transmitter [Hz]
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.DelayedTXTimerDivisor">
            <summary>
              Gets the divisor factor for the timer used for delayed transmission of 
              messages. The frequency of this timer is calculated from the frequency 
              of the can clock timer (<c>CanClockFrequency</c>) divided by the value 
              specified here. If delayed transmission is not supported by the 
              adapter, property <c>DelayedTXTimerDivisor</c> has the value 0.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.MaxDelayedTXTicks">
            <summary>
              Gets the maximum delay time of the delayed CAN message transmitter in 
              number of ticks.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.LineStatus">
            <summary>
              Gets the current status of the CAN line.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting CAN line status failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsStdOrExtFrames">
            <summary>
              Gets a value indicating if the CAN socket supports standard (11-bit) 
              and extended (29-bit) format exclusively.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsStdAndExtFrames">
            <summary>
              Gets a value indicating if the CAN socket supports standard (11-bit) 
              and extended (29-bit) message frames simultanously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsRemoteFrames">
            <summary>
              Gets a value indicating if the CAN socket supports remote transfer 
              requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsErrorFrames">
            <summary>
              Gets a value indicating if the CAN socket supports error frames.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsBusLoadComputation">
            <summary>
              Gets a value indicating if the CAN socket supports bus load computation.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsExactMessageFilter">
            <summary>
              Gets a value indicating if the CAN socket supports exact filtering of 
              CAN messages.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsListenOnlyMode">
            <summary>
              Gets a value indicating if the CAN socket supports listen only mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsCyclicMessageScheduler">
            <summary>
              Gets a value indicating if the CAN socket supports a cyclic message 
              scheduler.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsErrorFrameGeneration">
            <summary>
              Gets a value indicating if the CAN socket supports the generation of 
              error message frames.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsDelayedTransmission">
            <summary>
              Gets a value indicating if the CAN socket supports delayed transmission 
              of CAN message frames.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsSingleShotMessages">
            <summary>
              Gets a value indicating if the CAN socket supports single shot messages
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsHighPriorityMessages">
            <summary>
              Gets a value indicating if the CAN socket supports high priority messages
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsAutoBaudrateDetection">
            <summary>
              Gets a value indicating if the CAN socket supports auto baudrate detection 
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsExtendedDataLength">
            <summary>
              Gets a value indicating if the CAN socket supports extended data length 
              messages.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsFastDataRate">
            <summary>
              Gets a value indicating if the CAN socket supports fast data bit rate 
              messages.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsIsoCanFdFrames">
            <summary>
              Gets a value indicating if the CAN socket supports the ISO CAN-FD 
              format.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.SupportsNonIsoCanFdFrames">
            <summary>
              Gets a value indicating if the CAN socket supports the non-ISO CAN-FD
              format.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanSocket2.Supports64BitTimeStamps">
            <summary>
              Gets a value indicating if the CAN socket supports 64-bit timestamps
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.GetMessageReader">
            <summary>
              Gets a reference to a new instance of a message reader object for the 
              channel. This message reader provides access to the channel's receive 
              buffer.
              CAN messages received from the CAN line can be read from this object.
            </summary>
            <returns>
              A reference to the message reader of the channel.
              When no longer needed the message reader object has to be 
              disposed using the IDisposable interface. 
            </returns>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting the message reader failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.GetMessageWriter">
            <summary>
              Gets a reference to a new instance of a message writer object for the 
              channel. THis message writer provides access to the channel's transmit 
              buffer.
              CAN messages written to this transmit buffer are transmitted over the 
              CAN line.
            </summary>
            <returns>
              A reference to the message writer of the channel.
              When no longer needed the message writer object has to be 
              disposed using the IDisposable interface. 
            </returns>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting the message writer failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.Initialize(System.UInt16,System.UInt16,System.UInt32,Ixxat.Vci4.Bal.Can.CanFilterModes,System.Boolean)">
            <summary>
              This method initializes the CAN channel. This method must be called
              prior to any other method of the interface.
            </summary>
            <param name="receiveFifoSize">
              Size of the receive buffer (number of CAN messages)
            </param>
            <param name="transmitFifoSize">
              Size of the transmit buffer (number  of CAN messages)
            </param>
            <param name="filterSize">
              Size of the filter
            </param>
            <param name="filterMode">
              Mode of the filter (see <c>CanFilterModes</c>)
            </param>
            <param name="exclusive">
              If this parameter is set to true the method tries
              to initialize the channel for exclusive use. If set
              to false, the method initializes the channel for
              shared access.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Channel initialization failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
            <remarks>
              The channel is deactivated after this method returns an must be
              activeted by an Activate() method call.
              The method can be called more than once to reconfigure the size
              of the receive or transmit FIFOs.
            </remarks>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.Activate">
            <summary>
              This method activates the CAN channel. After activating the channel,
              CAN messages can be transmitted and received through the message writer
              and message reader.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Channel activation failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
            <remarks>
              The CAN line must be started, otherwise no messages are received or
              transmitted from/to the CAN line (see also ICanControl.StartLine).
            </remarks>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.Deactivate">
            <summary>
              This method deactivates the CAN channel. After deactivating the channel,
              no further CAN messages are transmitted or received to/from the CAN line.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Channel deactivation failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.GetFilterMode(Ixxat.Vci4.Bal.Can.CanFilter)">
            <summary>
              This method returns the set filter mode for the given selection.
            </summary>
            <param name="bSelect">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit acceptance filter, or <c>CanFilter.Ext</c> to
              select the 29-bit acceptance filter.
            </param>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.SetFilterMode(Ixxat.Vci4.Bal.Can.CanFilter,Ixxat.Vci4.Bal.Can.CanFilterModes)">
            <summary>
              This method sets the filter mode for the given selection.
            </summary>
            <param name="bSelect">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit acceptance filter, or <c>CanFilter.Ext</c> to
              select the 29-bit acceptance filter.
            </param>
            <param name="bMode">
              Operating mode. This can be one of the following values:
                <c>CanFilterModes.Lock</c> - lock filter (inhibit all IDs)
                <c>CanFilterModes.Pass</c> - bypass filter (pass all IDs)
                <c>CanFilterModes.Inclusive</c> - inclusive filtering (pass registered IDs)
                <c>CanFilterModes.Exclusive</c> - exclusive filtering (inhibit registered IDs)
            </param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.SetAccFilter(Ixxat.Vci4.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
              This method sets the global acceptance filter. The global acceptance
              filter enables the reception of CAN message identifiers specified by
              the bit patterns passed in <paramref name="dwCode"/> and 
              <paramref name="dwMask"/>. The message IDs enabled by this method are 
              always accepted, even if the specified IDs are not registered within 
              the filter list (see also <c>AddFilterIds</c>). The method can only be 
               called if the CAN controller is in 'init' mode.  
            </summary>
            <param name="bSelect">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit acceptance filter, or <c>CanFilter.Ext</c> to
              select the 29-bit acceptance filter.
            </param>
            <param name="dwCode">
              Acceptance code inclusive RTR bit. 
            </param>
            <param name="dwMask">
              Mask that specifies the relevant bits within <paramref name="dwCode"/>. 
              Relevant bits are specified by a 1 in the corresponding bit position,
              non relevant bits are 0. 
            </param>
            <remarks>
              The acceptance filter is defined by the acceptance code and acceptance 
              mask. The bit pattern of CANIDs to be received are defined by the 
              acceptance code. The corresponding acceptance mask allow to define 
              certain bit positions to be don't care (bit x = 0). 
            </remarks>
            <example>
              The values in <paramref name="dwCode"/> and <paramref name="dwMask"/> 
              have the following format:
              <code>
              select = CanFilter.Std
              
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
               bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
                   |  0 |  0 |  0 |  0 |   |  0 |ID11|   |ID2|ID1|ID0|RTR|
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
              
              select = CanFilter.Ext
              
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
               bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
                   |  0 |  0 |ID28|ID27|   |ID12|ID11|   |ID2|ID1|ID0|RTR|
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
              </code>  
              The following example demonstates how to compute the 
              <paramref name="dwCode"/> and <paramref name="dwMask"/> values to enable 
              the standard IDs in the range from 0x100 to 0x103 whereas RTR is 0.
              <code>
               dwCode   = 001 0000 0000 0
               dwMask   = 111 1111 1100 1
               result = 001 0000 00xx 0
              
               enabled IDs:
                        001 0000 0000 0 (0x100, RTR = 0)
                        001 0000 0001 0 (0x101, RTR = 0)
                        001 0000 0010 0 (0x102, RTR = 0)
                        001 0000 0011 0 (0x103, RTR = 0)
              </code>
            </example>
            <exception cref="T:Ixxat.Vci4.VciException">
              Setting acceptance filter failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.AddFilterIds(Ixxat.Vci4.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
              This method registers the specified CAN message identifier or group
              of identifiers at the specified filter list. IDs registered within the
              filter list are accepted for reception. The method can only be called 
              if the CAN controller is in 'init' mode.
            </summary>
            <param name="bSelect">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit filter list, or <c>CanFilter.Ext</c> to
              select the 29-bit filter list.
            </param>
            <param name="dwCode">
              Message identifier (inclusive RTR) to add to the filter list.  
            </param>
            <param name="dwMask">
              Mask that specifies the relevant bits within <paramref name="dwCode"/>. 
              Relevant bits are specified by a 1 in the corresponding bit position,
              non relevant bits are 0. 
            </param>
            <example>
              The following example demonstates how to compute the 
              <paramref name="dwCode"/> and <paramref name="dwMask"/> values to register 
              the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
              <code>
                dwCode   = 0101 0001 1000 1
                dwMask   = 0111 1111 1100 1
                result = 0101 0001 10xx 1
            
                IDs registered by this method:
                         0101 0001 1000 1 (0x518, RTR = 1)
                         0101 0001 1001 1 (0x519, RTR = 1)
                         0101 0001 1010 1 (0x51A, RTR = 1)
                         0101 0001 1011 1 (0x51B, RTR = 1)
              </code>
            </example>
            <exception cref="T:Ixxat.Vci4.VciException">
              Registering filter Ids failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanChannel2.RemFilterIds(Ixxat.Vci4.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
              This method removes the specified CAN message identifier or group
              of identifiers from the specified filter list. The method can only be
              called if the CAN controller is in 'init' mode.
            </summary>
            <param name="bSelect">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit filter list, or <c>CanFilter.Ext</c> to
              select the 29-bit filter list.
            </param>
            <param name="dwCode">
              Message identifier (inclusive RTR) to remove from the filter list. 
            </param>
            <param name="dwMask">
              Mask that specifies the relevant bits within <paramref name="dwCode"/>. 
              Relevant bits are specified by a 1 in the corresponding bit position,
              non relevant bits are 0. 
            </param>
            <example>
              The following example demonstates how to compute the 
              <paramref name="dwCode"/> and <paramref name="dwMask"/> values to remove 
              the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
              <code>
                dwCode   = 0101 0001 1000 1
                dwMask   = 0111 1111 1100 1
                result = 0101 0001 10xx 1
            
                IDs removed by this method:
                         0101 0001 1000 1 (0x518, RTR = 1)
                         0101 0001 1001 1 (0x519, RTR = 1)
                         0101 0001 1010 1 (0x51A, RTR = 1)
                         0101 0001 1011 1 (0x51B, RTR = 1)
              </code>
            </example>
            <exception cref="T:Ixxat.Vci4.VciException">
              Removing filter Ids failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanChannel2.ChannelStatus">
            <summary>
              Gets the current status of the CAN channel.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting channel status failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanControl">
            <summary>
              This interface represents a CAN control unit and is used to control a
              CAN line. Controlling consists of initialisation, starting/stoping 
              the CAN line and adjusting filter settings.
              When no longer needed the CAN contol object has to be disposed using the 
              IDisposable interface. 
              A CAN control object can be got via method <c>IBalObject.OpenSocket()</c>. 
              The CAN control cannot be opened twice at the same time. Therefore a
              second try to open the CAN control via <c>IBalObject.OpenSocket()</c>
              fails until the successfully opened CAN control object is explicitly
              disposed.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open communication channel on first CAN socket
              ICanControl control = bal.OpenSocket(0, typeof(ICanControl)) as ICanControl;
              
              // Initialize CAN line
              control.InitLine(CanOperatingModes.Standard, CanBitrate.Cia250KBit);
              
              // Use CAN line
              // ...
              
              // Dispose control and BAL
              control.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl.DetectBaud(System.UInt16,Ixxat.Vci4.Bal.Can.CanBitrate[])">
            <summary>
              This method detects the actual bit rate of the CAN line to which the
              controller is connected.
            </summary>
            <param name="timeout">
              Timeout in milliseconds to wait between two successive receive messages.
            </param>
            <param name="bitrateTable">
              One-dimensional array of initialized CanBitrate objects
              which contains possible values for the bit timing register
              to be tested.
            </param>
            <returns>
              If the method succeeds it returns the index of the detected CanBitrate
              entry within the specified array.
              If the method detects no baud rate it returns -1.
            </returns>
            <remarks>
              The method detects the actual bit rate beginning at the first entry
              within the specified array and switches to the next entry until the
              correct baud rate is detected or the table limit is reached. If the
              time between two successive receive messages exceed the value specified
              by the <paramref name="timeout"/> parameter, the method throws a 
              <c>VciException</c>.
              The total execution time of the method can be determined by the
              following formula:
              TotalExecutionTime [ms] = <paramref name="timeout"/> * <paramref name="bitrateTable"/>.Length
            </remarks>
            <exception cref="T:Ixxat.Vci4.VciException">
              VCI_E_TIMEOUT: Time between two successive receive messages exceed the value specified
              by the <paramref name="timeout"/> parameter.
              otherwise: see error message
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl.InitLine(Ixxat.Vci4.Bal.Can.CanOperatingModes,Ixxat.Vci4.Bal.Can.CanBitrate)">
             <summary>
               This method initialize the CAN line in the specified operating mode
               and bit transfer rate. The method also performs a reset of the CAN
               controller hardware and disables the reception of CAN messages.  
             </summary>
             <param name="operatingMode">
               Operating mode of the CAN controller 
             </param>
             <param name="bitrate">
               Bit timing value according to Philips SJA1000 at 16MHz 
             </param>
             <remarks>
               The <paramref name="operatingMode"/> parameter defines the operating mode 
               of the CAN controller. The operating mode can be a combination of the 
               following primary operating mode flags:
               <list type="bullet">
            
                 <item>
                   <description><c>CanOperatingModes.Standard</c> - standard frame format (11 bit identifier)</description>
                 </item>
                 <item>
                   <description><c>CanOperatingModes.Extended</c> - extended frame format (29 bit identifier)</description>
                 </item>
               </list>
               
               Optionally, the following flags can be combined with the primary operating
               mode flags:
               
               <list type="bullet">
                 <item>
                   <description><c>CanOperatingModes.ListOnly</c> - listen only mode</description>
                 </item>
                 <item>
                   <description><c>CanOperatingModes.ErrFrame</c> - accept error frames</description>
                 </item>
                 <item>
                   <description><c>CanOperatingModes.LowSpeed</c> - use low speed bus interface</description>
                 </item>
               </list>
               
               The bit transfer rate for the CAN controller is specified by the 
               <paramref name="bitrate"/> parameter. The timing value must be set 
               according to the values of the bit timing register 0 and 1 of an Philips 
               SJA1000 CAN controller at a frequency of 16 MHz. See the Philips SJA1000 
               datasheet for more information of how to compute the timing values for a 
               given bit rate.
             </remarks>
             <exception cref="T:Ixxat.Vci4.VciException">
               CAN line initialization failed.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               Object is already disposed.
             </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl.ResetLine">
            <summary>
              This method reset the CAN line to it's initial state. The method
              aborts a currently busy transmit message and switch the CAN controller
              into init mode. The method additionally clears the standard and
              extended mode ID filter. 
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Resetting CAN line failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed. 
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl.StartLine">
            <summary>
              This method starts the CAN line and switch it into running mode.
              After starting the CAN line, CAN messages can be transmitted over
              the message channel.  
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Starting CAN line failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed. 
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl.StopLine">
            <summary>
              This method stops the CAN line an switch it into init mode. After
              stopping the CAN controller no further CAN messages are transmitted
              over the message channel. Other than <c>ResetLine</c>, this method does
              not abort a currently busy transmit message and does not clear the
              standard and extended mode ID filter.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Stopping CAN line failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl.SetAccFilter(Ixxat.Vci4.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
              This method sets the global acceptance filter. The global acceptance
              filter enables the reception of CAN message identifiers specified by
              the bit patterns passed in <paramref name="code"/> and 
              <paramref name="mask"/>. The message IDs enabled by this method are 
              always accepted, even if the specified IDs are not registered within 
              the filter list (see also <c>AddFilterIds</c>). The method can only be 
               called if the CAN controller is in 'init' mode.  
            </summary>
            <param name="select">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit acceptance filter, or <c>CanFilter.Ext</c> to
              select the 29-bit acceptance filter.
            </param>
            <param name="code">
              Acceptance code inclusive RTR bit. 
            </param>
            <param name="mask">
              Mask that specifies the relevant bits within <paramref name="code"/>. 
              Relevant bits are specified by a 1 in the corresponding bit position,
              non relevant bits are 0. 
            </param>
            <remarks>
              The acceptance filter is defined by the acceptance code and acceptance 
              mask. The bit pattern of CANIDs to be received are defined by the 
              acceptance code. The corresponding acceptance mask allow to define 
              certain bit positions to be don't care (bit x = 0). 
            </remarks>
            <example>
              The values in <paramref name="code"/> and <paramref name="mask"/> 
              have the following format:
              <code>
              select = CanFilter.Std
              
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
               bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
                   |  0 |  0 |  0 |  0 |   |  0 |ID11|   |ID2|ID1|ID0|RTR|
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
              
              select = CanFilter.Ext
              
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
               bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
                   |  0 |  0 |ID28|ID27|   |ID12|ID11|   |ID2|ID1|ID0|RTR|
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
              </code>  
              The following example demonstates how to compute the 
              <paramref name="code"/> and <paramref name="mask"/> values to enable 
              the standard IDs in the range from 0x100 to 0x103 whereas RTR is 0.
              <code>
               code   = 001 0001 1000 0
               mask   = 111 1111 1100 1
               result = 001 0001 10xx 0
              
               enabled IDs:
                        001 0000 0000 0 (0x100, RTR = 0)
                        001 0000 0001 0 (0x101, RTR = 0)
                        001 0000 0010 0 (0x102, RTR = 0)
                        001 0000 0011 0 (0x103, RTR = 0)
              </code>
            </example>
            <exception cref="T:Ixxat.Vci4.VciException">
              Setting acceptance filter failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl.AddFilterIds(Ixxat.Vci4.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
              This method registers the specified CAN message identifier or group
              of identifiers at the specified filter list. IDs registered within the
              filter list are accepted for reception. The method can only be called 
              if the CAN controller is in 'init' mode.
            </summary>
            <param name="select">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit filter list, or <c>CanFilter.Ext</c> to
              select the 29-bit filter list.
            </param>
            <param name="code">
              Message identifier (inclusive RTR) to add to the filter list.  
            </param>
            <param name="mask">
              Mask that specifies the relevant bits within <paramref name="code"/>. 
              Relevant bits are specified by a 1 in the corresponding bit position,
              non relevant bits are 0. 
            </param>
            <example>
              The following example demonstates how to compute the 
              <paramref name="code"/> and <paramref name="mask"/> values to register 
              the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
              <code>
                code   = 0101 0001 1000 1
                mask   = 0111 1111 1100 1
                result = 0101 0001 10xx 1
            
                IDs registered by this method:
                         0101 0001 1000 1 (0x518, RTR = 1)
                         0101 0001 1001 1 (0x519, RTR = 1)
                         0101 0001 1010 1 (0x51A, RTR = 1)
                         0101 0001 1011 1 (0x51B, RTR = 1)
              </code>
            </example>
            <exception cref="T:Ixxat.Vci4.VciException">
              Registering filter Ids failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl.RemFilterIds(Ixxat.Vci4.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
              This method removes the specified CAN message identifier or group
              of identifiers from the specified filter list. The method can only be
              called if the CAN controller is in 'init' mode.
            </summary>
            <param name="select">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit filter list, or <c>CanFilter.Ext</c> to
              select the 29-bit filter list.
            </param>
            <param name="code">
              Message identifier (inclusive RTR) to remove from the filter list. 
            </param>
            <param name="mask">
              Mask that specifies the relevant bits within <paramref name="code"/>. 
              Relevant bits are specified by a 1 in the corresponding bit position,
              non relevant bits are 0. 
            </param>
            <example>
              The following example demonstates how to compute the 
              <paramref name="code"/> and <paramref name="mask"/> values to remove 
              the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
              <code>
                code   = 0101 0001 1000 1
                mask   = 0111 1111 1100 1
                result = 0101 0001 10xx 1
            
                IDs removed by this method:
                         0101 0001 1000 1 (0x518, RTR = 1)
                         0101 0001 1001 1 (0x519, RTR = 1)
                         0101 0001 1010 1 (0x51A, RTR = 1)
                         0101 0001 1011 1 (0x51B, RTR = 1)
              </code>
            </example>
            <exception cref="T:Ixxat.Vci4.VciException">
              Removing filter Ids failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanControl2">
            <summary>
              This interface represents a CAN control unit and is used to control a
              CAN line. Controlling consists of initialisation, starting/stoping 
              the CAN line and adjusting filter settings.
              When no longer needed the CAN contol object has to be disposed using the 
              IDisposable interface. 
              A CAN control object can be got via method <c>IBalObject.OpenSocket()</c>. 
              The CAN control cannot be opened twice at the same time. Therefore a
              second try to open the CAN control via <c>IBalObject.OpenSocket()</c>
              fails until the successfully opened CAN control object is explicitly
              disposed.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open communication channel on first CAN socket
              ICanControl2 control = bal.OpenSocket(0, typeof(ICanControl2)) as ICanControl2;
              
              // Initialize CAN line
              control.InitLine(CanOperatingModes.Standard
                              ,CanExtendedOperatingModes.ExtendedDataLength |
                               CanExtendedOperatingModes.FastDataRate |
                               CanExtendedOperatingModes.IsoCanFd
                              ,CanBitrate2._500KBit
                              ,CanBitrate2._2000KBit);
              
              // Use CAN line
              // ...
              
              // Dispose control and BAL
              control.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl2.DetectBaud(Ixxat.Vci4.Bal.Can.CanOperatingModes,Ixxat.Vci4.Bal.Can.CanExtendedOperatingModes,System.UInt16,Ixxat.Vci4.Bal.Can.CanFdBitrate[])">
            <summary>
              This method detects the actual bit rate of the CAN line to which the
              controller is connected.
            </summary>
            <param name="operatingMode">
              Operating mode of the CAN controller 
            </param>
            <param name="extendedMode">
              Extended operating mode of the CAN controller 
            </param>
            <param name="timeout">
              Timeout in milliseconds to wait between two successive receive messages.
            </param>
            <param name="bitrateTable">
              One-dimensional array of initialized CanBitrate2 objects
              which contains possible values for the bit timing register
              to be tested.
            </param>
            <returns>
              If the method succeeds it returns the index of the detected CanBitrate
              entry within the specified array.
              If the method detects no baud rate it returns -1.
            </returns>
            <remarks>
              The method detects the actual bit rate beginning at the first entry
              within the specified array and switches to the next entry until the
              correct baud rate is detected or the table limit is reached. If the
              time between two successive receive messages exceed the value specified
              by the <paramref name="timeout"/> parameter, the method throws a 
              <c>VciException</c>.
              The total execution time of the method can be determined by the
              following formula:
              TotalExecutionTime [ms] = <paramref name="timeout"/> * <paramref name="bitrateTable"/>.Length
            </remarks>
            <exception cref="T:Ixxat.Vci4.VciException">
              VCI_E_TIMEOUT: Time between two successive receive messages exceed the value specified
              by the <paramref name="timeout"/> parameter.
              otherwise: see error message
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl2.InitLine(Ixxat.Vci4.Bal.Can.CanOperatingModes,Ixxat.Vci4.Bal.Can.CanExtendedOperatingModes,Ixxat.Vci4.Bal.Can.CanFilterModes,System.UInt32,Ixxat.Vci4.Bal.Can.CanFilterModes,System.UInt32,Ixxat.Vci4.Bal.Can.CanBitrate2,Ixxat.Vci4.Bal.Can.CanBitrate2)">
             <summary>
               This method initialize the CAN line in the specified operating mode
               and bit transfer rate. The method also performs a reset of the CAN
               controller hardware and disables the reception of CAN messages.  
             </summary>
             <param name="operatingMode">
               Operating mode of the CAN controller 
             </param>
             <param name="extendedMode">
               Extended operating mode of the CAN controller 
             </param>
             <param name="filterModeStd">
               filter mode for standard Ids
             </param>
             <param name="cntIdsStd">
               size of standard filter in Ids
             </param>
             <param name="filterModeExt">
               filter mode for extended Ids
             </param>
             <param name="cntIdsExt">
               size of extended filter in Ids
             </param>
             <param name="bitrate">
               Bit timing value for the arbitration phase
             </param>
             <param name="extendedBitrate">
               Bit timing value for the data phase
             </param>
             <remarks>
               The <paramref name="operatingMode"/> parameter defines the operating mode 
               of the CAN controller. The operating mode can be a combination of the 
               following primary operating mode flags:
               <list type="bullet">
            
                 <item>
                   <description><c>CanOperatingModes.Standard</c> - standard frame format (11 bit identifier)</description>
                 </item>
                 <item>
                   <description><c>CanOperatingModes.Extended</c> - extended frame format (29 bit identifier)</description>
                 </item>
               </list>
               
               Optionally, the following flags can be combined with the primary operating
               mode flags:
               
               <list type="bullet">
                 <item>
                   <description><c>CanOperatingModes.ListOnly</c> - listen only mode</description>
                 </item>
                 <item>
                   <description><c>CanOperatingModes.ErrFrame</c> - accept error frames</description>
                 </item>
                 <item>
                   <description><c>CanOperatingModes.LowSpeed</c> - use low speed bus interface</description>
                 </item>
               </list>
            
               The same procedure applies for the <paramref name="extendedMode"/> parameter. However instead
               of using <c>CanOperatingModes</c> you need to use <c>CanExtendedOperatingModes</c>
               
             </remarks>
             <exception cref="T:Ixxat.Vci4.VciException">
               CAN line initialization failed.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               Object is already disposed.
             </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl2.ResetLine">
            <summary>
              This method reset the CAN line to it's initial state. The method
              aborts a currently busy transmit message and switch the CAN controller
              into init mode. The method additionally clears the standard and
              extended mode ID filter. 
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Resetting CAN line failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed. 
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl2.StartLine">
            <summary>
              This method starts the CAN line and switch it into running mode.
              After starting the CAN line, CAN messages can be transmitted over
              the message channel.  
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Starting CAN line failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed. 
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl2.StopLine">
            <summary>
              This method stops the CAN line an switch it into init mode. After
              stopping the CAN controller no further CAN messages are transmitted
              over the message channel. Other than <c>ResetLine</c>, this method does
              not abort a currently busy transmit message and does not clear the
              standard and extended mode ID filter.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Stopping CAN line failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl2.SetAccFilter(Ixxat.Vci4.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
              This method sets the global acceptance filter. The global acceptance
              filter enables the reception of CAN message identifiers specified by
              the bit patterns passed in <paramref name="code"/> and 
              <paramref name="mask"/>. The message IDs enabled by this method are 
              always accepted, even if the specified IDs are not registered within 
              the filter list (see also <c>AddFilterIds</c>). The method can only be 
               called if the CAN controller is in 'init' mode.  
            </summary>
            <param name="select">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit acceptance filter, or <c>CanFilter.Ext</c> to
              select the 29-bit acceptance filter.
            </param>
            <param name="code">
              Acceptance code inclusive RTR bit. 
            </param>
            <param name="mask">
              Mask that specifies the relevant bits within <paramref name="code"/>. 
              Relevant bits are specified by a 1 in the corresponding bit position,
              non relevant bits are 0. 
            </param>
            <remarks>
              The acceptance filter is defined by the acceptance code and acceptance 
              mask. The bit pattern of CANIDs to be received are defined by the 
              acceptance code. The corresponding acceptance mask allow to define 
              certain bit positions to be don't care (bit x = 0). 
            </remarks>
            <example>
              The values in <paramref name="code"/> and <paramref name="mask"/> 
              have the following format:
              <code>
              select = CanFilter.Std
              
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
               bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
                   |  0 |  0 |  0 |  0 |   |  0 |ID11|   |ID2|ID1|ID0|RTR|
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
              
              select = CanFilter.Ext
              
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
               bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
                   |  0 |  0 |ID28|ID27|   |ID12|ID11|   |ID2|ID1|ID0|RTR|
                   +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
              </code>  
              The following example demonstates how to compute the 
              <paramref name="code"/> and <paramref name="mask"/> values to enable 
              the standard IDs in the range from 0x100 to 0x103 whereas RTR is 0.
              <code>
               code   = 001 0000 0000 0
               mask   = 111 1111 1100 1
               result = 001 0000 00xx 0
              
               enabled IDs:
                        001 0000 0000 0 (0x100, RTR = 0)
                        001 0000 0001 0 (0x101, RTR = 0)
                        001 0000 0010 0 (0x102, RTR = 0)
                        001 0000 0011 0 (0x103, RTR = 0)
              </code>
            </example>
            <exception cref="T:Ixxat.Vci4.VciException">
              Setting acceptance filter failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl2.AddFilterIds(Ixxat.Vci4.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
              This method registers the specified CAN message identifier or group
              of identifiers at the specified filter list. IDs registered within the
              filter list are accepted for reception. The method can only be called 
              if the CAN controller is in 'init' mode.
            </summary>
            <param name="select">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit filter list, or <c>CanFilter.Ext</c> to
              select the 29-bit filter list.
            </param>
            <param name="code">
              Message identifier (inclusive RTR) to add to the filter list.  
            </param>
            <param name="mask">
              Mask that specifies the relevant bits within <paramref name="code"/>. 
              Relevant bits are specified by a 1 in the corresponding bit position,
              non relevant bits are 0. 
            </param>
            <example>
              The following example demonstates how to compute the 
              <paramref name="code"/> and <paramref name="mask"/> values to register 
              the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
              <code>
                code   = 0101 0001 1000 1
                mask   = 0111 1111 1100 1
                result = 0101 0001 10xx 1
            
                IDs registered by this method:
                         0101 0001 1000 1 (0x518, RTR = 1)
                         0101 0001 1001 1 (0x519, RTR = 1)
                         0101 0001 1010 1 (0x51A, RTR = 1)
                         0101 0001 1011 1 (0x51B, RTR = 1)
              </code>
            </example>
            <exception cref="T:Ixxat.Vci4.VciException">
              Registering filter Ids failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanControl2.RemFilterIds(Ixxat.Vci4.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
              This method removes the specified CAN message identifier or group
              of identifiers from the specified filter list. The method can only be
              called if the CAN controller is in 'init' mode.
            </summary>
            <param name="select">
              Filter selection. This parameter can be either <c>CanFilter.Std</c>
              to select the 11-bit filter list, or <c>CanFilter.Ext</c> to
              select the 29-bit filter list.
            </param>
            <param name="code">
              Message identifier (inclusive RTR) to remove from the filter list. 
            </param>
            <param name="mask">
              Mask that specifies the relevant bits within <paramref name="code"/>. 
              Relevant bits are specified by a 1 in the corresponding bit position,
              non relevant bits are 0. 
            </param>
            <example>
              The following example demonstates how to compute the 
              <paramref name="code"/> and <paramref name="mask"/> values to remove 
              the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
              <code>
                code   = 0101 0001 1000 1
                mask   = 0111 1111 1100 1
                result = 0101 0001 10xx 1
            
                IDs removed by this method:
                         0101 0001 1000 1 (0x518, RTR = 1)
                         0101 0001 1001 1 (0x519, RTR = 1)
                         0101 0001 1010 1 (0x51A, RTR = 1)
                         0101 0001 1011 1 (0x51B, RTR = 1)
              </code>
            </example>
            <exception cref="T:Ixxat.Vci4.VciException">
              Removing filter Ids failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanMsgFrameType">
            <summary>
              Enumeration of values that are used to specify the frame type of a 
              CAN message (see <c>CanMessage</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgFrameType.Data">
            <summary>
              Normal message. 
              All regular receive messages are of this type. The property <c>Identifier</c>
              contains the ID of the message, the field <c>TimeStamp</c> the time of 
              reception. The data field (accessible via the message's indexer) contain 
              according to length (see <c>DataLength</c>) the databytes of the message. 
              With transmit messages the IDs are to be entered in the property 
              <c>Identifier</c> and the databytes according to length in the property
              <c>DataLength</c>. The property <c>TimeStamp</c> is normally set to 0, 
              unless the message is to be transmitted with a delay. In this case the 
              delay time is to be specified in ticks.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgFrameType.Info">
            <summary>
              Information message. 
              This message type is entered in the receive buffers of all activated 
              message channels with certain events or with changes to the status of 
              the controller. The property <c>Identifier</c> of the message always has the 
              value 0xFFFFFFFF. The property Data[0] (Indexer of the message) contains 
              one of the following values:
              <list type="table">
                <listheader>
                  <term>Constant</term>
                  <description>Meaning</description>
                </listheader>
                <item>
                   <term><c>CanMsgInfoValue.Start</c></term>
                   <description>
                     The CAN controller was started. The property <c>TimeStamp</c>  
                     contains the relative start time (normally 0).
                   </description>
                </item>
                <item>
                   <term><c>CanMsgInfoValue.Stop</c></term>
                   <description>
                     The CAN controller was stopped. The property <c>TimeStamp</c> 
                     contains the value 0. 
                   </description>
                </item>
                <item>
                   <term><c>CanMsgInfoValue.Reset</c></term>
                   <description>
                      The CAN controller was reset. The property <c>TimeStamp</c>
                      contains the value 0.
                   </description>
                </item>
              </list>
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgFrameType.Error">
            <summary>
              Error message. 
              This message type is entered in the receive buffers of all activated message 
              channels when bus errors occur if the flag <c>CanOperatingModes.ErrFrame</c> 
              was specified in the parameter operatingMode when the method 
              <c>ICanControl.InitLine</c>  was called. The property <c>Identifier</c> of 
              the message always has the value 0xFFFFFFFF. The time of the event is marked 
              in the property <c>TimeStamp</c> of the message. The property Data[0] 
              (indexer of the message) contains one of the following values:
              <list type="table">
                <listheader>
                  <term>Constant</term>
                  <description>Meaning</description>
                </listheader>
                <item>
                   <term><c>CanMsgError.Stuff</c></term>
                   <description>Bit stuff error</description>
                </item>
                <item>
                   <term><c>CanMsgError.Form</c></term>
                   <description>Format error</description>
                </item>
                <item>
                   <term><c>CanMsgError.Acknowledge</c></term>
                   <description>Acknowledge error</description>
                </item>
                <item>
                   <term><c>CanMsgError.Bit</c></term>
                   <description>Bit error</description>
                </item>
                <item>
                   <term><c>CanMsgError.Crc</c></term>
                   <description>CRC error</description>
                </item>
                <item>
                   <term><c>CanMsgError.Other</c></term>
                   <description>Other unspecified error</description>
                </item>
              </list>
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgFrameType.Status">
            <summary>
              Status message. 
              This message type is entered in the receive buffers of all activated 
              message channels when the controller status changes. The property
              <c>Identifier</c> of the message always has the value 0xFFFFFFFF. 
              The time of the event is marked in the property <c>TimeStamp</c> of 
              the message. The property Data[0] (indexer of the message) contains 
              flags defined by <c>CanCtrlStatus</c>. 
              The contents of the other data fields are undefined.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgFrameType.Wakeup">
            <summary>
              Not currently used, or reserved for future extensions.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgFrameType.TimeOverrun">
            <summary>
              Timer overrun. 
              Messages of this type are generated when an overrun of the 32-bit 
              time stamp of CAN messages occurs. The time of the event (normally 0) 
              is given in the property <c>TimeStamp</c> of the message and the number 
              of timer overruns after the last timer overrun message in the <c>Identifier</c>. 
              The contents of the data fields are undefined.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgFrameType.TimeReset">
            <summary>
              Not currently used, or reserved for future extensions.
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanMsgAccReason">
            <summary>
              Enumeration of values that are used to specify the filter that indicated 
              the acceptance of a CAN message (see <c>CanMessage</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgAccReason.Reject">
            <summary>
              Message not accepted
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgAccReason.Always">
            <summary>
              Message always accepted
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgAccReason.Filter1">
            <summary>
              Message accepted by 1. filter
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgAccReason.Filter2">
            <summary>
              Message accepted by 2. filter
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanMsgInfoValue">
            <summary>
              Enumeration of information values supplied in first data field byte of
              an info frame <c>CanMessage</c> 
              (CanMessage.FrameType == CanMsgFrameType.Info).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgInfoValue.Start">
            <summary>
              Start of CAN controller
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgInfoValue.Stop">
            <summary>
              Stop of CAN controller
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgInfoValue.Reset">
            <summary>
              Reset of CAN controller
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanMsgError">
            <summary>
              Enumeration of error information values supplied in first data field byte 
              of an eror frame <c>CanMessage</c> 
              (CanMessage.FrameType == CanMsgFrameType.Error).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgError.Stuff">
            <summary>
              Stuff error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgError.Form">
            <summary>
              Form error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgError.Acknowledge">
            <summary>
              Acknowledgment error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgError.Bit">
            <summary>
              Bit error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgError.Fdb">
            <summary>
              fast data bit error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgError.Crc">
            <summary>
              CRC error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgError.Dlc">
            <summary>
              Data length error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanMsgError.Other">
            <summary>
              Other (unspecified) error
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.mgdCANMSGINFO">
            <summary>
              Managed image of native struct CANMSGINFO.
            </summary>
            <remarks>
              We have to declare a managed version of native struct CANMSGINFO to 
              prevent problems because of the following compiler error C4368.
              (see <c>mngtCANMSG</c>).
            </remarks>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSGINFO.bType">
            <summary>type (see CAN_MSGTYPE_ constants)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSGINFO.bReserved">
            <summary>reserved</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSGINFO.bFlags">
            <summary>flags (see CAN_MSGFLAGS_ constants)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSGINFO.bAccept">
            <summary>accept code (see CAN_ACCEPT_ constants)</summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.mgdCANMSG">
            <summary>
              Managed image of native struct CANMSG.
            </summary>
            <remarks>
              We have to declare a managed version of native struct CANMSG to prevent
              problems because of the following compiler error:
              error C4368: cannot define 'm_CanMsg' as a member of managed 
                           'Ixxat::Vci4::Bal::Can::CanMessage': mixed types are not 
                           supported
            </remarks>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSG.dwTime">
            <summary>time stamp for receive message</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSG.dwMsgId">
            <summary>CAN message identifier (INTEL format)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSG.uMsgInfo">
            <summary>message information (bit field)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSG.bData1">
            <summary>message data</summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanMessage">
            <summary>
              This class represents a CAN message. CAN messages can be received
              and transmitted via the message reader (<c>ICanMessageReader</c>) and 
              the message writer (<c>ICanMessageWriter</c>) of a CAN channel 
              (<c>ICanChannel</c>). 
              The CAN data field can be accessed via the indexer property.
            </summary>
            <example>
              <code>
                IMessageFactory factory = VciServer.Instance().MsgFactory;
                ICanMessage canMsg = (ICanMessage)factory.CreateMsg(typeof(ICanMessage));
                  
                canMsg.TimeStamp  = 0;
                canMsg.Identifier = 0x100;
                canMsg.FrameType  = CanMsgFrameType.Data;
                canMsg.DataLength = 8;
                canMsg.SelfReceptionRequest = true;  // show this message in the console window
                
                for (Byte i = 0; i &lt; canMsg.DataLength; i++)
                {
                  canMsg[i] = i;
                }
                
                // Write the CAN message into the transmit FIFO
                mWriter.SendMessage(canMsg);
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessage.Clear">
            <summary>
              This method clears the contents of this CAN message.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.TimeStamp">
            <summary>
              With receive messages, this field contains the relative reception time 
              of the message in ticks. The resolution of a tick can be calculated from 
              the properties <c>ICanSocket.ClockFrequency</c> and 
              <c>ICanSocket.TimeStampCounterDivisor</c> in accordance with the 
              following formula:
              <code>
                Resolution [s] = TimeStampCounterDivisor / ClockFrequency 
              </code>
              With transmit messages, the field defines with how many ticks delay the 
              message is to be transmitted to the bus. The delay time between the last 
              message transmitted and the new message can be calculated with the 
              properties <c>ICanSocket.ClockFrequency</c> and 
              <c>ICanSocket.DelayedTXTimerDivisor</c> in accordance with the following 
              formula:
              <code>
                delay time [s] = (DelayedTXTimerDivisor / ClockFrequency) * TimeStamp 
              </code>
              The maximum possible delay time is defined by the property 
              <c>ICanSocket.MaxDelayedTXTicks</c>.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.Identifier">
            <summary>
              Gets or sets the CAN identifier of this CAN message.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.FrameType">
            <summary>
              Gets a value indicating the frame type of this CAN message.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.AcceptReason">
            <summary>
              Gets a value indicating the filter that accepted the message.
            </summary>
            <returns>
              A value indicating the filter that accepted the message.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.DataLength">
            <summary>
              Gets or sets the data length of this CAN/CANFD message.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The data length value to be set is out of range [0;64].
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.PossibleOverrun">
            <summary>
              Gets a value indicating whether this message was the last
              message which could be placed in the receive FIFO, before
              this overflows.
            </summary>
            <returns>
              A value indicating whether this message was the last
              message which could be placed in the receive FIFO, before
              this overflows.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.SelfReceptionRequest">
            <summary>
              Gets or sets a value indicating whether this message is the result of
              a self reception request.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.RemoteTransmissionRequest">
            <summary>
              Gets or sets a value indicating whether this message is a remote
              transmission request.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.ExtendedFrameFormat">
            <summary>
              Gets or sets a value indicating whether this message has extended
              frame format (29-bit id).
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.SingleShotMode">
            <summary>
              Gets or sets the single shot mode bit of the frame.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.HighPriorityMsg">
            <summary>
              Gets or sets the high priority bit of the frame.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.ExtendedDataLength">
            <summary>
              Gets or sets the extended data length bit of the frame.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.FastDataRate">
            <summary>
              Gets or sets the fast data rate bit of the frame.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.ErrorStateIndicator">
            <summary>
              Gets or sets the fast error state indicator of the frame.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessage.Item(System.Int32)">
            <summary>
              Gets or sets a single data byte at the specified index from this
              CAN message. This property represents the indexer property.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The specified index is out of range [0;<c>DataLength</c>].
            </exception>
            <example>
              <code>
                IMessageFactory factory = VciServer.Instance().MsgFactory;
                ICanMessage canMsg = (ICanMessage)factory.CreateMsg(typeof(ICanMessage));
                  
                canMsg.TimeStamp  = 0;
                canMsg.Identifier = 0x100;
                canMsg.FrameType  = CanMsgFrameType.Data;
                canMsg.DataLength = 8;
                canMsg.SelfReceptionRequest = true;  // show this message in the console window
                
                for (Byte i = 0; i &lt; canMsg.DataLength; i++)
                {
                  canMsg[i] = i;
                }
                
                // Write the CAN message into the transmit FIFO
                mWriter.SendMessage(canMsg);
              </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.mgdCANMSG2">
            <summary>
              Managed image of native struct CANMSG2.
            </summary>
            <remarks>
              We have to declare a managed version of native struct CANMSG2 to prevent
              problems because of the following compiler error:
              error C4368: cannot define 'm_CanMsg' as a member of managed 
                           'Ixxat::Vci4::Bal::Can::CanMessage': mixed types are not 
                           supported
            </remarks>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSG2.dwTime">
            <summary>time stamp for receive message</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSG2._rsvd_">
            <summary>reserved (set to 0)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSG2.dwMsgId">
            <summary>CAN message identifier (INTEL format)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSG2.uMsgInfo">
            <summary>message information (bit field)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANMSG2.bData1">
            <summary>message data</summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanMessage2">
            <summary>
              This class represents a CAN FD message. CAN FD messages can be received
              and transmitted via the message reader (<c>ICanMessageReader</c>) and 
              the message writer (<c>ICanMessageWriter</c>) of a CAN channel 
              (<c>ICanChannel2</c>). 
              The CAN data field can be accessed via the indexer property.
            </summary>
            <example>
              <code>
                IMessageFactory factory = VciServer.Instance().MsgFactory;
                ICanMessage2 canMsg = (ICanMessage)factory.CreateMsg(typeof(ICanMessage2));
                  
                canMsg.TimeStamp  = 0;
                canMsg.Identifier = 0x100;
                canMsg.FrameType  = CanMsgFrameType.Data;
                canMsg.DataLength = 8;
                canMsg.SelfReceptionRequest = true;  // show this message in the console window
                
                for (Byte i = 0; i &lt; canMsg.DataLength; i++)
                {
                  canMsg[i] = i;
                }
                
                // Write the CAN message into the transmit FIFO
                mWriter.SendMessage(canMsg);
              </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanMessageReader">
            <summary>
              This interface represents a CAN message reader. It's used to read 
              received CAN messages from a CAN communication channel 
              (see <c>ICanChannel</c>).
              When no longer needed the CAN message reader object has to be disposed 
              using the IDisposable interface. 
              A CAN message reader object can be got via method 
              <c>ICanChannel.GetMessageReader()</c>. 
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open communication channel on first CAN socket
              ICanChannel channel = bal.OpenSocket(0, typeof(ICanChannel)) as ICanChannel;
              
              // Initialize channel non-exclusively
              channel.Initialize(100, 100, false);
              
              // Get the message reader
              ICanMessageReader reader = channel.GetMessageReader();
              
              // Use message reader
              // ...
              
              // Dispose the objects
              reader.Dispose();
              channel.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageReader.Lock">
            <summary>
              This method locks the access to the FIFO. 
              Use the Lock()/Unlock() pair if you access the FIFO 
              from different threads.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Lock failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageReader.Unlock">
            <summary>
              This method releases the access to the FIFO. 
              Use the Lock()/Unlock() pair if you access the FIFO 
              from different threads.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Unlock failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageReader.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
              This method assigns an event object to the message reader. The event
              is set to the signaled state if the number of available messages within
              the receive FIFO exceed the currently set receive threshold.
            </summary>
            <param name="fifoEvent">
              The event object which is to be set if the number of available 
              messages within the receive FIFO exceed the currently set receive 
              threshold.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageReader.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
              This method assigns an event object to the message reader. The event
              is set to the signaled state if the number of available messages within
              the receive FIFO exceed the currently set receive threshold.
            </summary>
            <param name="fifoEvent">
              The event object which is to be set if the number of available 
              messages within the receive FIFO exceed the currently set receive 
              threshold.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageReader.ReadMessage(Ixxat.Vci4.Bal.Can.ICanMessage@)">
            <summary>
              This method reads a single CAN message from the front of the
              receive FIFO and remove the message from the FIFO.
            </summary>
            <param name="message">
              Reference to a CanMessage where the method stores the read the message.
            </param>
            <returns>
              true on success, false if no message is available to read.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageReader.ReadMessage(Ixxat.Vci4.Bal.Can.ICanMessage2@)">
            <summary>
              This method reads a single CAN message from the front of the
              receive FIFO and remove the message from the FIFO.
            </summary>
            <param name="message">
              Reference to a CanMessage where the method stores the read the message.
            </param>
            <returns>
              true on success, false if no message is available to read.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageReader.ReadMessages(Ixxat.Vci4.Bal.Can.ICanMessage[]@)">
             <summary>
               This method reads multiple CAN messages from the front of the
               receive FIFO and removes the messages from the FIFO.
             </summary>
             <param name="msgarray">
               Reference to a array to store messages into.
             </param>
             <returns>
               number of messages read.
             </returns>
             <example>
               <code>
                 ICanMessage[] msgArray;
            
                 do
                 {
                   // Wait 100 msec for a message reception
                   if (mRxEvent.WaitOne(100, false))
                   {
                     if (mReader.ReadMessages(out msgArray) > 0)
                     {
                       foreach (ICanMessage entry in msgArray)
                       {
                         PrintMessage(entry);
                       }
                     }
                   }
                 } while (0 == mMustQuit);
               </code>
             </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageReader.ReadMessages(Ixxat.Vci4.Bal.Can.ICanMessage2[]@)">
             <summary>
               This method reads multiple CAN messages from the front of the
               receive FIFO and removes the messages from the FIFO.
             </summary>
             <param name="msgarray">
               Reference to a array to store messages into.
             </param>
             <returns>
               number of messages read.
             </returns>
             <example>
               <code>
                 ICanMessage2[] msgArray;
            
                 do
                 {
                   // Wait 100 msec for a message reception
                   if (mRxEvent.WaitOne(100, false))
                   {
                     if (mReader.ReadMessages(out msgArray) > 0)
                     {
                       foreach (ICanMessage2 entry in msgArray)
                       {
                         PrintMessage(entry);
                       }
                     }
                   }
                 } while (0 == mMustQuit);
               </code>
             </example>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessageReader.Capacity">
            <summary>
              Gets the capacity of the receive FIFO in number of CAN messages.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessageReader.FillCount">
            <summary>
              Gets the number of currently unread CAN messages within the receive FIFO.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessageReader.Threshold">
            <summary>
              Gets or sets the threshold for the trigger event. If the receive
              FIFO contains at least the specified number of CAN messages, the event
              specified by a <c>AssignEvent</c> method call is set to the signaled 
              state.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Setting Threshold failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanMessageWriter">
            <summary>
              This interface represents a CAN message writer. It's used to write 
              CAN messages to a CAN communication channel for transmission.
              (see <c>ICanChannel</c>).
              When no longer needed the CAN message writer object has to be disposed 
              using the IDisposable interface. 
              A CAN message writer object can be got via method 
              <c>ICanChannel.GetMessageWriter()</c>. 
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open communication channel on first CAN socket
              ICanChannel channel = bal.OpenSocket(0, typeof(ICanChannel)) as ICanChannel;
              
              // Initialize channel non-exclusively
              channel.Initialize(100, 100, false);
              
              // Get the message writer
              ICanMessageWriter writer = channel.GetMessageWriter();
              
              // Use message writer
              // ...
              
              // Dispose the objects
              writer.Dispose();
              channel.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageWriter.Lock">
            <summary>
              This method locks the access to the FIFO. 
              Use the Lock()/Unlock() pair if you access the FIFO 
              from different threads.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Lock failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageWriter.Unlock">
            <summary>
              This method releases the access to the FIFO. 
              Use the Lock()/Unlock() pair if you access the FIFO 
              from different threads.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Unlock failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageWriter.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
              This method assigns an event object to the message writer. The event
              is set to the signaled state if the number free entries within the 
              transmit FIFO reaches or exceed the currently set threshold.
            </summary>
            <param name="fifoEvent">
              The event object which is set to the signaled state if the number free 
              entries within the transmit FIFO reaches or exceed the currently set 
              threshold.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageWriter.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
              This method assigns an event object to the message writer. The event
              is set to the signaled state if the number free entries within the 
              transmit FIFO reaches or exceed the currently set threshold.
            </summary>
            <param name="fifoEvent">
              The event object which is set to the signaled state if the number free 
              entries within the transmit FIFO reaches or exceed the currently set 
              threshold.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageWriter.SendMessage(Ixxat.Vci4.Bal.Can.ICanMessage)">
            <summary>
              This method places a single CAN message at the end of the
              transmit FIFO and returns without waiting for the message to
              be transmitted.
            </summary>
            <param name="message">
              The CanMessage to send.
            </param>
            <returns>
              If the method succeeds it returns true. The method returns false
              if there is not enought free space available within the transmit FIFO
              to add the message.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanMessageWriter.SendMessage(Ixxat.Vci4.Bal.Can.ICanMessage2)">
            <summary>
              This method places a single CAN message at the end of the
              transmit FIFO and returns without waiting for the message to
              be transmitted.
            </summary>
            <param name="message">
              The CanMessage to send.
            </param>
            <returns>
              If the method succeeds it returns true. The method returns false
              if there is not enought free space available within the transmit FIFO
              to add the message.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessageWriter.Capacity">
            <summary>
              Gets the capacity of the transmit FIFO in number of CAN messages.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessageWriter.FreeCount">
            <summary>
              Gets the number of currently free CAN messages within the transmit FIFO.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanMessageWriter.Threshold">
            <summary>
              Gets or sets the threshold for the trigger event. If the transmit
              FIFO contains at least the specified number of free entries, the event
              specified by a <c>AssignEvent</c> method call is set to the signaled 
              state.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Setting Threshold failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG">
            <summary>
              Managed image of native struct CANCYCLICTXMSG2.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG.wCycleTime">
            <summary>cycle time for the message in ticks</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG.bIncrMode">
            <summary>auto increment mode (see CAN_CTXMSG_INC_ const)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG.bByteIndex">
            <summary>index of the byte within abData[] to increment</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG.dwMsgId">
            <summary>CAN message identifier (INTEL format)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG.uMsgInfo">
            <summary>message information (bit field)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG.bData1">
            <summary>message data</summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanCyclicTXIncMode">
            <summary>
              Enumeration of modes for cyclic CAN transmit messages.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCyclicTXIncMode.NoInc">
            <summary>
              No automatic increment of a message field occurs.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCyclicTXIncMode.IncId">
            <summary>
              Increments the CAN ID of the message after every transmit process by 1. 
              If the CAN ID reaches the value 2048 (11-bit ID) or 536.870.912 (29-bit ID), 
              there is an automatic overrun to 0.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCyclicTXIncMode.Inc8">
            <summary>
              Increments an 8-bit value in the data field of the message. The data field 
              to be incremented is defined in the proerty <c>AutoIncrementIndex</c>. If 
              the maximum value 255 is exceeded, there is an automatic overrun to 0.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCyclicTXIncMode.Inc16">
            <summary>
              Increments a 16-bit value in the data field of the message. The least 
              significant byte of the 16-bit value to be incremented is defined in the 
              property <c>AutoIncrementIndex</c>. The most significant byte is in 
              Data[AutoIncrementIndex+1]. If the maximum value 65535 is exceeded, there 
              is an automatic overrun to 0.
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanCyclicTXStatus">
            <summary>
              Enumeration of values that indicate the status of a cyclic CAN 
              transmit message.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCyclicTXStatus.Empty">
            <summary>
              The message entry is empty
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCyclicTXStatus.Busy">
            <summary>
              Processing is in progress
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCyclicTXStatus.Done">
            <summary>
              Processing has completed
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanScheduler">
             <summary>
               This interface represents a CAN scheduler. A CAN scheduler provides the
               functionality to cyclically transmit CAN messages. Optionally such a 
               transmit message automatically be altered form one trasmission to the
               next (identifier or a piece of data).
               The CAN scheduler provides methods to establish, start and stop cyclic 
               transmit messages for a CAN line.
               When no longer needed the CAN scheduler object has to be disposed using 
               the IDisposable interface. 
               A CAN scheduler object can be got via method <c>IBalObject.OpenSocket()</c>. 
               The CAN scheduler cannot be opened twice at the same time. Therefore a
               second try to open the CAN scheduler via <c>IBalObject.OpenSocket()</c>
               fails until the successfully opened CAN scheduler object is explicitly
               disposed.
             </summary>
             <remarks>
               The VCI interfaces provide access to native driver resources. Because the 
               .NET garbage collector is only designed to manage memory, but not 
               native OS and driver resources the caller is responsible to release this 
               resources via calling <c>IDisposable.Dispose()</c> when the object is no 
               longer needed. Otherwise native memory and resource leaks may occure.
             </remarks>
             <example>
               <code>
               IBalObject bal = ...
               // Open scheduler on first CAN socket
               ICanScheduler scheduler = bal.OpenSocket(0, typeof(ICanScheduler2)) as ICanScheduler;
               
               // Create and init cyclic transmit message
               ICanCyclicTXMsg message;
               message = scheduler.AddMessage();
               
               message.Identifier         = 0x100;
               message.DataLength         = 1;
               message[0]                 = 0xAF;
               message.AutoIncrementMode  = CanCyclicTXIncMode.Inc8;
               message.AutoIncrementIndex = 0;
               message.CycleTicks = 1;
               
               // Start endless transmission
               message.Start(0);
               
               //...
            
               // Dispose scheduler
               scheduler.Dispose();
               bal.Dispose();
               </code>
             </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler.Suspend">
            <summary>
              This method suspends execution of the scheduler and stops processing
              of all currently registered messages.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Suspending scheduler failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler.Resume">
            <summary>
              This method resumes execution of the scheduler and starts processing
              of all currently registered message.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Resuming scheduler failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler.Reset">
            <summary>
              This method suspends execution of the scheduler and removes all
              currently registered messages.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Resetting scheduler failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler.UpdateStatus">
            <summary>
              This method updates the status of the scheduler and all currently
              registered messages.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler.AddMessage">
            <summary>
              This method adds a new cyclic transmit message to the scheduler.
            </summary>
            <result>
              Reference to the added cyclic transmit message.
            </result>
            <exception cref="T:Ixxat.Vci4.VciException">
              Adding the cyclic transmit message to the scheduler failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
              The transmit object cannot be registered at the scheduler because
              the maximum number of supported transmit object has already been reached.
            </exception>
            <exception cref="T:System.ArgumentException">
              The specified transmit object is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              The specified transmit object is already registered at a scheduler.
            </exception>
            <remarks>
              The method only adds messages with <c>FrameType</c> set to 
              <c>CanMsgFrameType.Data</c>.
            </remarks>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg">
             <summary>
               This class represents a cyclic CAN transmit message. 
               An instance of CanCyclicTXMsg has to be added to a CAN scheduler
               (see <c>ICanScheduler</c>) before it's transmission can be started.
             </summary>
             <example>
               <code>
               IBalObject bal = ...
               // Open scheduler on first CAN socket
               ICanScheduler scheduler = bal.OpenSocket(0, typeof(ICanScheduler2)) as ICanScheduler;
               
               // Create and init cyclic transmit message
               ICanCyclicTXMsg message;
               message = scheduler.AddMessage();
               
               message.Identifier         = 0x100;
               message.DataLength         = 1;
               message[0]                 = 0xAF;
               message.AutoIncrementMode  = CanCyclicTXIncMode.Inc8;
               message.AutoIncrementIndex = 0;
               message.CycleTicks = 1;
               
               // Start endless transmission
               message.Start(0);
               
               //...
            
               // Dispose scheduler
               scheduler.Dispose();
               bal.Dispose();
              </code>
             </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg.Start(System.UInt16)">
            <summary>
              Starts a cyclic message
            </summary>
            <param name="repeatCount">Number of repeats. Zero repeats endless.</param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg.Stop">
            <summary>
              Stops a cyclic message
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg.Reset">
            <summary>
              Resets a cyclic message
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg.Status">
            <summary>
              Gets the current status of this cyclic CAN message.
            </summary>
            <returns>
              The current status of this cyclic CAN transmit message.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg.CycleTicks">
            <summary>
              Gets or Sets the cycle time of this cyclic CAN transmit message in :
              number of clock ticks (See <c>ICanSocket.ClockFrequency</c> and 
              <c>ICanSocket.CyclicMessageTimerDivisor</c>). Clock ticks have a valid 
              range of 1 to <c>ICanSocket.MaxCyclicMessageTicks</c>.
              The cycle time can be calculated in accordance with the following formula:
              <code>
                cycle time [s] = (CyclicMessageTimerDivisor / ClockFrequency) * CycleTime 
              </code>
            </summary>
            <remarks>
              The contents of a cyclic CAN transmit message can only be changed
              as long as the message is not registered at the scheduler. A call
              of this method is silently ignored if the message is currently
              registered at the scheduler.
            </remarks>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg.AutoIncrementMode">
            <summary>
              Gets or sets the auto-increment mode of this cyclic CAN transmit message.
              Auto-increment mode. This can be one of the following constants:
                <c>CanCyclicTXIncMode.NoInc</c> - no auto-increment
                <c>CanCyclicTXIncMode.IncId</c> - auto-increment the CAN message identifier
                <c>CanCyclicTXIncMode.Inc8</c>  - auto-increment a 8-bit data field
                <c>CanCyclicTXIncMode.Inc16</c> - auto-increment a 16-bit data field
            </summary>
            <remarks>
              If <c>AutoIncrementMode</c> is set to either 
              <c>CanCyclicTXIncMode.Inc8</c> or <c>CanCyclicTXIncMode.Inc16</c>, 
              the <c>AutoIncrementIndex</c> property specifies the index of the first 
              byte within the CAN message to be auto-incremented.
              The contents of a cyclic CAN transmit message can be only changed
              as long as the message is not registered at the scheduler. A call
              of this method is silently ignored if the message is currently
              registered at the scheduler.
            </remarks>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg.AutoIncrementIndex">
            <summary>
              Gets or sets the index of the auto-incremented data field of this cyclic 
              CAN transmit message.
            </summary>
            <remarks>
              If <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc8</c> the 
              property <propref name="AutoIncrementIndex"/> specifies the byte within the data 
              field which is auto-incremented after each transmission of the CAN message. 
              If <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc16</c>
              the property <propref name="AutoIncrementIndex"/> specifies the least significant 
              byte within the data field which is auto-incremented after each 
              transmission of the CAN message. The most significant byte of the 
              auto-incremented data field is at <c>Data</c>[Index+1].
              The contents of a cyclic CAN transmit message can be only changed
              as long as the message is not registered at the scheduler. A call
              of this method is silently ignored if the message is currently
              registered at the scheduler.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The specified data index is out of range.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG2">
            <summary>
              Managed image of native struct CANCYCLICTXMSG2.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG2.wCycleTime">
            <summary>cycle time for the message in ticks</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG2.bIncrMode">
            <summary>auto increment mode (see CAN_CTXMSG_INC_ const)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG2.bByteIndex">
            <summary>index of the byte within abData[] to increment</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG2.dwMsgId">
            <summary>CAN message identifier (INTEL format)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG2.uMsgInfo">
            <summary>message information (bit field)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.mgdCANCYCLICTXMSG2.bData1">
            <summary>message data</summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanScheduler2">
             <summary>
               This interface represents a CAN scheduler. A CAN scheduler provides the
               functionality to cyclically transmit CAN messages. Optionally such a 
               transmit message automatically be altered form one trasmission to the
               next (identifier or a piece of data).
               The CAN scheduler provides methods to establish, start and stop cyclic 
               transmit messages for a CAN line.
               When no longer needed the CAN scheduler object has to be disposed using 
               the IDisposable interface. 
               A CAN scheduler object can be got via method <c>IBalObject.OpenSocket()</c>. 
               The CAN scheduler cannot be opened twice at the same time. Therefore a
               second try to open the CAN scheduler via <c>IBalObject.OpenSocket()</c>
               fails until the successfully opened CAN scheduler object is explicitly
               disposed.
             </summary>
             <remarks>
               The VCI interfaces provide access to native driver resources. Because the 
               .NET garbage collector is only designed to manage memory, but not 
               native OS and driver resources the caller is responsible to release this 
               resources via calling <c>IDisposable.Dispose()</c> when the object is no 
               longer needed. Otherwise native memory and resource leaks may occure.
             </remarks>
             <example>
               <code>
               IBalObject bal = ...
               // Open scheduler on first CAN socket
               ICanScheduler2 scheduler = bal.OpenSocket(0, typeof(ICanScheduler2)) as ICanScheduler2;
               
               // Create and init cyclic transmit message
               ICanCyclicTXMsg message;
               message = scheduler.AddMessage();
               
               message.Identifier         = 0x100;
               message.DataLength         = 1;
               message[0]                 = 0xAF;
               message.AutoIncrementMode  = CanCyclicTXIncMode.Inc8;
               message.AutoIncrementIndex = 0;
               message.CycleTicks = 1;
               
               // Start endless transmission
               message.Start(0);
               
               //...
            
               // Dispose scheduler
               scheduler.Dispose();
               bal.Dispose();
               </code>
             </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler2.Suspend">
            <summary>
              This method suspends execution of the scheduler and stops processing
              of all currently registered messages.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Suspending scheduler failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler2.Resume">
            <summary>
              This method resumes execution of the scheduler and starts processing
              of all currently registered message.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Resuming scheduler failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler2.Reset">
            <summary>
              This method suspends execution of the scheduler and removes all
              currently registered messages.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Resetting scheduler failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler2.UpdateStatus">
            <summary>
              This method updates the status of the scheduler and all currently
              registered messages.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanScheduler2.AddMessage">
            <summary>
              This method adds a new cyclic transmit message to the scheduler.
            </summary>
            <result>
              Reference to the added cyclic transmit message.
            </result>
            <exception cref="T:Ixxat.Vci4.VciException">
              Adding the cyclic transmit message to the scheduler failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
              The transmit object cannot be registered at the scheduler because
              the maximum number of supported transmit object has already been reached.
            </exception>
            <exception cref="T:System.ArgumentException">
              The specified transmit object is a null reference.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              The specified transmit object is already registered at a scheduler.
            </exception>
            <remarks>
              The method only adds messages with <c>FrameType</c> set to 
              <c>CanMsgFrameType.Data</c>.
            </remarks>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg2">
             <summary>
               This class represents a cyclic CAN transmit message. 
               An instance of CanCyclicTXMsg2 has to be added to a CAN scheduler
               (see <c>ICanScheduler2</c>) before it's transmission can be started.
             </summary>
             <example>
               <code>
               IBalObject bal = ...
               // Open scheduler on first CAN socket
               ICanScheduler2 scheduler = bal.OpenSocket(0, typeof(ICanScheduler2)) as ICanScheduler2;
               
               // Create and init cyclic transmit message
               ICanCyclicTXMsg message;
               message = scheduler.AddMessage();
               
               message.Identifier         = 0x100;
               message.DataLength         = 1;
               message[0]                 = 0xAF;
               message.AutoIncrementMode  = CanCyclicTXIncMode.Inc8;
               message.AutoIncrementIndex = 0;
               message.CycleTicks = 1;
               
               // Start endless transmission
               message.Start(0);
               
               //...
            
               // Dispose scheduler
               scheduler.Dispose();
               bal.Dispose();
              </code>
             </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg2.Start(System.UInt16)">
            <summary>
              Starts a cyclic message
            </summary>
            <param name="repeatCount">Number of repeats. Zero repeats endless.</param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg2.Stop">
            <summary>
              Stops a cyclic message
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg2.Reset">
            <summary>
              Resets a cyclic message
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg2.Status">
            <summary>
              Gets the current status of this cyclic CAN message.
            </summary>
            <returns>
              The current status of this cyclic CAN transmit message.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg2.CycleTicks">
            <summary>
              Gets or Sets the cycle time of this cyclic CAN transmit message in :
              number of clock ticks (See <c>ICanSocket.ClockFrequency</c> and 
              <c>ICanSocket.CyclicMessageTimerDivisor</c>). Clock ticks have a valid 
              range of 1 to <c>ICanSocket.MaxCyclicMessageTicks</c>.
              The cycle time can be calculated in accordance with the following formula:
              <code>
                cycle time [s] = (CyclicMessageTimerDivisor / ClockFrequency) * CycleTime 
              </code>
            </summary>
            <remarks>
              The contents of a cyclic CAN transmit message can only be changed
              as long as the message is not registered at the scheduler. A call
              of this method is silently ignored if the message is currently
              registered at the scheduler.
            </remarks>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg2.AutoIncrementMode">
            <summary>
              Gets or sets the auto-increment mode of this cyclic CAN transmit message.
              Auto-increment mode. This can be one of the following constants:
                <c>CanCyclicTXIncMode.NoInc</c> - no auto-increment
                <c>CanCyclicTXIncMode.IncId</c> - auto-increment the CAN message identifier
                <c>CanCyclicTXIncMode.Inc8</c>  - auto-increment a 8-bit data field
                <c>CanCyclicTXIncMode.Inc16</c> - auto-increment a 16-bit data field
            </summary>
            <remarks>
              If <c>AutoIncrementMode</c> is set to either 
              <c>CanCyclicTXIncMode.Inc8</c> or <c>CanCyclicTXIncMode.Inc16</c>, 
              the <c>AutoIncrementIndex</c> property specifies the index of the first 
              byte within the CAN message to be auto-incremented.
              The contents of a cyclic CAN transmit message can be only changed
              as long as the message is not registered at the scheduler. A call
              of this method is silently ignored if the message is currently
              registered at the scheduler.
            </remarks>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Can.ICanCyclicTXMsg2.AutoIncrementIndex">
            <summary>
              Gets or sets the index of the auto-incremented data field of this cyclic 
              CAN transmit message.
            </summary>
            <remarks>
              If <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc8</c> the 
              property <propref name="AutoIncrementIndex"/> specifies the byte within the data 
              field which is auto-incremented after each transmission of the CAN message. 
              If <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc16</c>
              the property <propref name="AutoIncrementIndex"/> specifies the least significant 
              byte within the data field which is auto-incremented after each 
              transmission of the CAN message. The most significant byte of the 
              auto-incremented data field is at <c>Data</c>[Index+1].
              The contents of a cyclic CAN transmit message can be only changed
              as long as the message is not registered at the scheduler. A call
              of this method is silently ignored if the message is currently
              registered at the scheduler.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The specified data index is out of range.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanBusCouplings">
            <summary>
              Enumeration of flag values that are used to signalize the CAN bus 
              coupling (see <c>ICanSocket</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanBusCouplings.Undefined">
            <summary>
              Undefined
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanBusCouplings.LowSpeed">
            <summary>
              Low speed coupling
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanBusCouplings.HighSpeed">
            <summary>
              High speed coupling
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanCtrlType">
            <summary>
              Enumeration of values that are used to signalize the type of a CAN 
              controller (see <c>ICanSocket</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.Unknown">
            <summary>
              Unknown (possibly MC internal)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.Intel82527">
            <summary>
              Intel 82527
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.Intel82C200">
            <summary>
              Intel 82C200
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.Intel81C90">
            <summary>
              Intel 81C90
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.Intel81C92">
            <summary>
              Intel 82C92
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.SJA1000">
            <summary>
              Philips SJA 1000
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.Infineon82C900">
            <summary>
              Infinion 82C900 (TwinCAN)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.TouCAN">
            <summary>
              Motorola TOUCAN
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.msCAN">
            <summary>
              Freescale Star12 MSCAN
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.FLEXCAN">
            <summary>
              Freescale Coldfire FLEXCAN
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.IFI_CAN">
            <summary>
              IFI Can (Altera FPGA)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.C_CAN">
            <summary>
              Bosch C_CAN
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.bxCAN">
            <summary>
              ST BX_CAN
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.IFI_CAN_FD">
            <summary>
              IFI CAN FD (Altera FPGA)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanCtrlType.M_CAN">
            <summary>
              Bosch M_CAN
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanFilter">
            <summary>
              Enumeration of values that are used for filter selection to specify
              a CAN message filter. See interface <c>ICanControl</c>.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFilter.Std">
            <summary>
              Select standard filter (11-bit)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFilter.Ext">
            <summary>
              Select extended filter (29-bit)
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanAccMask">
            <summary>
              Enumeration with predefined CAN acceptance filter mask settings.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanAccMask.All">
            <summary>
              Acceptance mask to accept all CAN IDs
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanAccMask.None">
            <summary>
              Acceptance mask to reject all CAN IDs
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanAccCode">
            <summary>
              Enumeration with predefined CAN acceptance filter code settings.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanAccCode.All">
            <summary>
              Acceptance code to accept all CAN IDs
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanAccCode.None">
            <summary>
              Acceptance code to reject all CAN IDs
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Can.CanFeatures">
            <summary>
              Enumeration of flag values that are used to signalize the features 
              supported by a CAN controller (see <c>ICanSocket</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.StdOrExt">
            <summary>
              11 OR 29 bit (exclusive)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.StdAndExt">
            <summary>
              11 AND 29 bit (simultaneous)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.RemoteFrame">
            <summary>
              Reception of remote frames
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.ErrFrame">
            <summary>
              Reception of error frames
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.Busload">
            <summary>
              Bus load measurement in percent
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.IdFilter">
            <summary>
              Listen only mode
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.ListOnly">
            <summary>
              Cyclic message scheduler
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.Scheduler">
            <summary>
              Cyclic message scheduler
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.GenErrFrame">
            <summary>
              Error frame generation
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.DelayedTX">
            <summary>
              Delayed message transmitter
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.SingleShot">
            <summary>
              Single shot mode
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.HighPriorityMsg">
            <summary>
              High priority message
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.AutoBaudrate">
            <summary>
              Automatic bit rate detection
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.ExtendedDataLength">
            <summary>
              Extended data length (CAN-FD)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.FastDataRate">
            <summary>
              Fast data bit rate (CAN-FD)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.IsoCanFd">
            <summary>
              ISO conform frame (CAN-FD)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.NonIsoCanFd">
            <summary>
              non-ISO conform frame (CAN-FD)
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Can.CanFeatures.LongBitTimeStamp">
            <summary>
              64-bit time stamp counter
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinInitLine">
            <summary>
              Struct that contains LIN bus initialization data that's used by 
              <c>ILinControl.InitLine</c>
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinInitLine.OperatingMode">
            <summary>LIN operating mode</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinInitLine.Bitrate">
            <summary>LIN bitrate</summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.ILinControl">
            <summary>
              This interface represents a LIN control unit and is used to control a
              LIN line. Controlling consists of initialisation, starting/stoping 
              the LIN line and sending messages.
              When no longer needed the LIN contol object has to be disposed using the 
              IDisposable interface. 
              A LIN control object can be got via method <c>IBalObject.OpenSocket()</c>. 
              The LIN control cannot be opened twice at the same time. Therefore a
              second try to open the LIN control via <c>IBalObject.OpenSocket()</c>
              fails until the successfully opened LIN control object is explicitly
              disposed.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open communication channel on first LIN socket
              ILinControl control = bal.OpenSocket(0, typeof(ILinControl)) as ILinControl;
              
              // Initialize CAN line
              LinInitLine initData;
              initData.OperatingMode = LinOperatingModes.Slave;
              initData.Bitrate = LinBitrate.Lin1000Bit;
              control.InitLine(initData);
              
              // Use LIN line
              // ...
              
              // Dispose control and BAL
              control.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.ILinSocket">
            <summary>
              <c>ILinSocket</c> provides the properties and capabilities of a
              LIN controller.
              When no longer needed the LIN socket object has to be disposed using the 
              IDisposable interface. 
              A LIN socket object can be got via method <c>IBalObject.OpenSocket()</c>.
              Additionally <c>ILinSocket</c> is the base interface for several other
              LIN bus specific socket interfaces like <c>ILinControl</c> and 
              <c>ILinMonitor</c>.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open first LIN socket
              ILinSocket socket = bal.OpenSocket(0, typeof(ILinSocket)) as ILinSocket;
              
              // Use socket
              // ...
              
              // Dispose socket an BAL
              socket.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinSocket.LineStatus">
            <summary>
              Gets the current status of the LIN line.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting LIN line status failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinSocket.Features">
            <summary>
              Gets a flag field indicating the features supported by the LIN controller.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinSocket.SupportsMasterMode">
            <summary>
              Gets a value indicating if the LIN socket supports LIN master mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinSocket.SupportsAutorate">
            <summary>
              Gets a value indicating if the LIN socket supports automatic baudrate
              detection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinSocket.SupportsErrorFrames">
            <summary>
              Gets a value indicating if the LIN socket supports error frame reception.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinSocket.SupportsBusLoadComputation">
            <summary>
              Gets a value indicating if the LIN socket supports bus load computation.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinSocket.ClockFrequency">
            <summary>
              Gets the frequency to the primary timer in Hz.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinSocket.TimeStampCounterDivisor">
            <summary>
              Gets the divisor factor of the time stamp counter. 
              The time stamp counter provides the time stamp for LIN messages. 
              The frequency of the time stamp counter is calculated from the frequency 
              of the primary timer (<c>ClockFrequency</c>) divided by the value 
              specified here.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinControl.InitLine(Ixxat.Vci4.Bal.Lin.LinInitLine)">
            <summary>
              This method initializes the LIN line in the specified operating mode
              and bit transfer rate. The method also performs a reset of the LIN
              controller hardware.
            </summary>
            <param name="initLine">
              Specifies the operating mode and bit transfer rate 
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              LIN line initialization failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinControl.ResetLine">
            <summary>
              This method resets the LIN line to it's initial state. The method
              aborts a currently busy transmit message and switches the LIN controller
              into init mode.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Resetting LIN line failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinControl.StartLine">
            <summary>
              This method starts the LIN line and switch it into running mode.
              After starting the LIN line.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Starting LIN line failed.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed. 
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinControl.StopLine">
            <summary>
              This method stops the LIN line an switches it into init mode. After
              stopping the LIN controller no further LIN messages are transmitted.
              Other than <c>ResetLine</c>, this method does not abort a currently 
              busy transmit message.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Stopping LIN line failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.  
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinControl.WriteMessage(System.Boolean,Ixxat.Vci4.Bal.Lin.ILinMessage)">
            <summary>
              This function either transmits the specified message directly to the LIN 
              bus connected to the controller or enters the message in the response 
              table of the controller.
            </summary>
            <param name="send">
              true to force sending the message directly or false to enter the message
              into the controller's response table.
            </param>
            <param name="message">
              The message to be transmitted.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Writing the message failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinOperatingModes">
            <summary>
              Enumeration of flag values that are used to specify or signalize the 
              operating mode of a LIN controller (see <c>LinLineStatus</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinOperatingModes.Slave">
            <summary>
              Indicates the LIN slave mode
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinOperatingModes.Master">
            <summary>
              Indicates the LIN master mode
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinOperatingModes.Errors">
            <summary>
              Enables reception of error frames
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinCtrlStatus">
            <summary>
              Enumeration of flag values that are used to signalize the status mode of
              a LIN controller (see <c>LinLineStatus</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinCtrlStatus.Overrun">
            <summary>
              Data overrun occurred
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinCtrlStatus.InInit">
            <summary>
              Init mode active
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinLineStatus">
            <summary>
              <c>LinLineStatus</c> is used to signalize the status of a LIN 
              controller.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinLineStatus.#ctor(Ixxat.Vci4.Bal.Lin.LinOperatingModes,System.Byte,Ixxat.Vci4.Bal.Lin.LinCtrlStatus,System.UInt32)">
            <summary>
              Ctor - create a LinLineStatus object
            </summary>
            <param name="opmode">operating mode</param>
            <param name="busload">bus load</param>
            <param name="ctrlstat">controller status</param>
            <param name="bitrate">bitrate</param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinLineStatus.ToString">
            <summary>
              This method returns a String that represents the current timing value.
            </summary>
            <returns>
              A String that represents the current bit timing value.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinLineStatus.OperatingMode">
            <summary>
              Gets the current operating mode of the LIN controller.
            </summary>
            <returns>
              The current operating mode of the LIN controller.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinLineStatus.IsInSlaveMode">
            <summary>
              Gets a value indicating whether the LIN controller is currently
              operating in slave mode.
            </summary>
            <returns>
              true if the LIN controller is currently operating in slave 
              mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinLineStatus.IsInMasterMode">
            <summary>
              Gets a value indicating whether the LIN controller is currently
              operating in master mode.
            </summary>
            <returns>
              true if the LIN controller is currently operating in master 
              mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinLineStatus.IsErrModeEnabled">
            <summary>
              Gets a value indicating if the reception of error frames is currently 
              enabled.
            </summary>
            <returns>
              true if the reception of error frames is currently enabled,
              otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinLineStatus.ControllerStatus">
            <summary>
              Gets the current LIN controller status.
            </summary>
            <returns>
              Current LIN controller status.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinLineStatus.HasDataOverrun">
            <summary>
              Gets a value indicating if a message was lost because there was
              not enough free space for the message in the LIN controllers
              internal message buffer.
            </summary>
            <returns>
              true if a data overrun has occured, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinLineStatus.IsInInitMode">
            <summary>
              Gets a value indicating whether the LIN controller is currently in init 
              mode.
            </summary>
            <returns>
              true if the LIN controller is in init mode, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinLineStatus.Busload">
            <summary>
              Gets the current bus load (0...100%).
            </summary>
            <returns>
              Current bus load (0...100%).
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinLineStatus.Bitrate">
            <summary>
              Gets a value indicating whether the LIN controller is currently in init 
              mode.
            </summary>
            <returns>
              true if the LIN controller is in init mode, otherwise false.
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinMessageType">
            <summary>
              Enumeration of values that are used to specify the message type of a 
              LIN message (see <c>LinMessage</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMessageType.Data">
            <summary>
              Normal message. 
              All regular receive messages are of this type. 
              The property <c>LinMessage.ProtId</c> contains the ID of the message, 
              the property <c>LinMessage.TimeStamp</c> the receive time. 
              The data field (accessible via the message's indexer) contains, 
              according to length (see <c>DataLength</c>) the databytes of the message.
            . In master mode, messages of this type can also be transmitted. The ID 
              must be entered in the property <c>LinMessage.ProtId</c> and in the data 
              field (accessible via the message's indexer), depending on the length
              (<c>ProtId</c>), the data to be transmitted. 
              The property <c>LinMessage.TimeStamp</c> is set to 0. To transmit
              only the ID without data, property <c>IdOnly</c> is set to true.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMessageType.Info">
            <summary>
              Information message. 
              This message type is entered in the receive buffers of all activated 
              message monitors with certain events or with changes to the status of 
              the controller. The property <c>Identifier</c> of the message always has the 
              value 0xFF. The property Data[0] (Indexer of the message) contains 
              one of the following values:
              <list type="table">
                <listheader>
                  <term>Constant</term>
                  <description>Meaning</description>
                </listheader>
                <item>
                   <term><c>LinMsgInfoValue.Start</c></term>
                   <description>
                     The LIN controller was started. The property <c>TimeStamp</c>  
                     contains the relative start time (normally 0).
                   </description>
                </item>
                <item>
                   <term><c>LinMsgInfoValue.Stop</c></term>
                   <description>
                     The LIN controller was stopped. The property <c>TimeStamp</c> 
                     contains the value 0. 
                   </description>
                </item>
                <item>
                   <term><c>LinMsgInfoValue.Reset</c></term>
                   <description>
                      The LIN controller was reset. The property <c>TimeStamp</c>
                      contains the value 0.
                   </description>
                </item>
              </list>
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMessageType.Error">
            <summary>
              Error message. 
              This message type is entered in the receive buffers of all activated message 
              monitors when bus errors occur as far as <c>LinOperatingModes.ErrFrame</c> 
              was specified in the parameter OperatingMode when the method 
              <c>ILinControl.InitLine</c> was called. The property <c>ProtId</c> of 
              the message always has the value 0xFF. The time of the event is marked 
              in the property <c>TimeStamp</c> of the message. The property Data[0] 
              (indexer of the message) contains one of the following values:
              <list type="table">
                <listheader>
                  <term>Constant</term>
                  <description>Meaning</description>
                </listheader>
                <item>
                   <term><c>LinMsgError.Bit</c></term>
                   <description>Bit error</description>
                </item>
                <item>
                   <term><c>LinMsgError.Crc</c></term>
                   <description>Checksum error</description>
                </item>
                <item>
                   <term><c>LinMsgError.Parity</c></term>
                   <description>Parity error of the identifier</description>
                </item>
                <item>
                   <term><c>LinMsgError.SlaveNoResponse</c></term>
                   <description>Slave does not respond</description>
                </item>
                <item>
                   <term><c>LinMsgError.Sync</c></term>
                   <description>Invalid synchronization field</description>
                </item>
                <item>
                   <term><c>LinMsgError.NoBus</c></term>
                   <description>No bus activity</description>
                </item>
                <item>
                   <term><c>LinMsgError.Other</c></term>
                   <description>Other unspecified error</description>
                </item>
              </list>
              The property Data[1] (indexer of the message) contains the low value byte 
              of the current status (see <c>LinLineStatus</c>). The content of the other 
              data field bytes is undefined.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMessageType.Status">
            <summary>
              Status message. 
              This message type is entered in the receive buffers of all activated 
              message monitors when the controller status changes. The property
              <c>ProtId</c> of the message always has the value 0xFF. 
              The time of the event is marked in the property <c>TimeStamp</c> of 
              the message. The property Data[0] (indexer of the message) contains 
              flags defined by <c>CanCtrlStatus</c>. 
              The contents of the other data fields are undefined.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMessageType.Wakeup">
            <summary>
              Only for transmit messages. Messages of this type generate a wake-up 
              signal on the bus. The fields <c>TimeStamp</c>, <c>ProtId</c> and 
              <c>DataLength</c> have no significance.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMessageType.TimeOverrun">
            <summary>
              Timer counter overrun. Messages of this type are generated in the event 
              of an overrun of the 32 bit time stamp of LIN messages. The field 
              <c>TimeStamp</c> of the message contains the time of the event 
              (normally 0) and in the field <c>DataLength</c> the number of timer 
              overruns after the last timer overrun message.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMessageType.Sleep">
            <summary>
              Goto Sleep message. The fields <c>TimeStamp</c>, <c>ProtId</c> and 
              <c>DataLength</c> have no significance.
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinMsgInfoValue">
            <summary>
              Enumeration of information values supplied in first data field byte of
              an info frame <c>LinMessage</c> 
              (LinMessage.MessageType == LinMessageType.Info).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgInfoValue.Start">
            <summary>
              Start of LIN controller
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgInfoValue.Stop">
            <summary>
              Stop of LIN controller
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgInfoValue.Reset">
            <summary>
              Reset of LIN controller
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinMsgError">
            <summary>
              Enumeration of error information values supplied in first data field byte 
              of an eror frame <c>LinMessage</c> 
              (LinMessage.MessageType == LinMessageType.Error).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgError.Bit">
            <summary>
              Bit error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgError.Crc">
            <summary>
              Checksum error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgError.Parity">
            <summary>
              Parity error of the identifier
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgError.SlaveNoResponse">
            <summary>
              Slave does not respond
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgError.Sync">
            <summary>
              Invalid synchronization field
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgError.NoBus">
            <summary>
              No bus activity
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinMsgError.Other">
            <summary>
              Other unspecified error
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.mgdLINMSGINFO">
            <summary>
              Managed image of native struct LINMSGINFO.
            </summary>
            <remarks>
              We have to declare a managed version of native struct LINMSGINFO to 
              prevent problems because of the following compiler error C4368.
              (see <c>mngtLINMSG</c>).
            </remarks>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.mgdLINMSGINFO.bPid">
            <summary>protected id</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.mgdLINMSGINFO.bType">
            <summary>message type (see LIN_MSGTYPE_ constants)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.mgdLINMSGINFO.bDlen">
            <summary>data length</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.mgdLINMSGINFO.bFlags">
            <summary>flags (see LIN_MSGFLAGS_ constants)</summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.mgdLINMSG">
            <summary>
              Managed image of native struct LINMSG.
            </summary>
            <remarks>
              We have to declare a managed version of native struct LINMSG to prevent
              problems because of the following compiler error:
              error C4368: cannot define 'm_LinMsg' as a member of managed 
                           'Ixxat::Vci4::Bal::Lin::LinMessage': mixed types are not 
                           supported
            </remarks>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.mgdLINMSG.dwTime">
            <summary>time stamp for receive message [ms]</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.mgdLINMSG.uMsgInfo">
            <summary>message information (bit field)</summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.mgdLINMSG.bData1">
            <summary>message data</summary>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.ILinMessage">
            <summary>
              This class represents a LIN message. LIN messages can be received
              via a LIN monitor (<c>ILinMonitor</c>) and transmitted via a LIN control
              (<c>ILinControl</c>). The LIN data field can be accessed via the 
              indexer property.
            </summary>
            <example>
              <code>
                IMessageFactory factory = VciServer.Instance().MsgFactory;
                ILinMessage message = (ICanMessage)factory.CreateMsg(typeof(ILinMessage));
                  
                // Set DLC = 2
                message.DataLength = 2;
                // Initialize data field with 0xFF 0x08
                message[0] = 0xFF;
                message[1] = 0x08;
              </code>
            </example>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessage.TimeStamp">
            <summary>
              With receive messages, this field contains the relative reception time 
              of the message in ticks. The resolution of a tick can be calculated from 
              the properties <c>ILinSocket.ClockFrequency</c> and 
              <c>ILinSocket.TimeStampCounterDivisor</c> in accordance with the 
              following formula:
              <code>
                Resolution [s] = TimeStampCounterDivisor / ClockFrequency 
              </code>
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessage.ProtId">
            <summary>
              Gets or sets the protected identifier of this LIN message.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessage.MessageType">
            <summary>
              Gets a value indicating the frame type of this message.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessage.DataLength">
            <summary>
              Gets or sets the data length of this message.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The data length value to be set is out of range [0;8].
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessage.PossibleOverrun">
            <summary>
              Gets a value indicating whether this message was the last
              message which could be placed in the receive FIFO, before
              this overflows.
            </summary>
            <returns>
              A value indicating whether this message was the last
              message which could be placed in the receive FIFO, before
              this overflows.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessage.ExtendedCrc">
            <summary>
              Gets or sets a value indicating if it is a message with extended
              checksum in accordance with LIN 2.0.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessage.SenderOfResponse">
            <summary>
              Gets a value indicating that the LIN controller itself transmitted the 
              message, i.e. with messages for which the controller has an entry
              in the response table.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessage.IdOnly">
            <summary>
              Gets or sets a value indicating if the message should be sent without
              data (only with identifier).
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessage.Item(System.Int32)">
            <summary>
              Gets or sets a single data byte at the specified index from this
              message. This property represents the indexer property.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The specified index is out of range [0;<c>DataLength</c>].
            </exception>
            <example>
              <code>
                IMessageFactory factory = VciServer.Instance().MsgFactory;
                ILinMessage message = (ICanMessage)factory.CreateMsg(typeof(ILinMessage));
                  
                // Set DLC = 2
                message.DataLength = 2;
                // Initialize data field with 0xFF 0x08
                message[0] = 0xFF;
                message[1] = 0x08;
              </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.ILinMessageReader">
            <summary>
              This interface represents a LIN message reader. It's used to read 
              received LIN messages from a LIN monitor (see <c>ILinMonitor</c>).
              When no longer needed the LIN message reader object has to be disposed 
              using the IDisposable interface. 
              A LIN message reader object can be got via method 
              <c>ILinMonitor.GetMessageReader()</c>. 
            </summary>
            <remarks>
              The VCI interfaces provides access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open monitor on first LIN socket
              ILinMonitor monitor = bal.OpenSocket(0, typeof(ILinMonitor)) as ILinMonitor;
              
              // Initialize channel non-exclusively
              monitor.Initialize(100, false);
              
              // Get the message reader
              ILinMessageReader reader = monitor.GetMessageReader();
              
              // Use message reader
              // ...
              
              // Dispose the objects
              reader.Dispose();
              monitor.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinMessageReader.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
              This method assigns an event object to the message reader. The event
              is set to the signaled state if the number of available messages within
              the receive FIFO exceed the currently set receive threshold.
            </summary>
            <param name="fifoEvent">
              The event object which is to be set if the number of available 
              messages within the receive FIFO exceed the currently set receive 
              threshold.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinMessageReader.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
              This method assigns an event object to the message reader. The event
              is set to the signaled state if the number of available messages within
              the receive FIFO exceed the currently set receive threshold.
            </summary>
            <param name="fifoEvent">
              The event object which is to be set if the number of available 
              messages within the receive FIFO exceed the currently set receive 
              threshold.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinMessageReader.ReadMessage(Ixxat.Vci4.Bal.Lin.ILinMessage@)">
            <summary>
              This method reads a single message from the front of the
              receive FIFO and remove the message from the FIFO.
            </summary>
            <param name="message">
              Reference to a LinMessage where the method stores the read the message.
            </param>
            <returns>
              true on success, false if no message is available to read.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinMessageReader.ReadMessages(Ixxat.Vci4.Bal.Lin.ILinMessage[]@)">
             <summary>
               This method reads multiple LIN messages from the front of the
               receive FIFO and removes the messages from the FIFO.
             </summary>
             <param name="msgarray">
               Reference to a array to store messages into.
             </param>
             <returns>
               number of messages read.
             </returns>
             <example>
               <code>
                 ILinMessage[] msgArray;
            
                 do
                 {
                   // Wait 100 msec for a message reception
                   if (mRxEvent.WaitOne(100, false))
                   {
                     if (mReader.ReadMessages(out msgArray) > 0)
                     {
                       foreach (ILinMessage entry in msgArray)
                       {
                         PrintMessage(entry);
                       }
                     }
                   }
                 } while (0 == mMustQuit);
               </code>
             </example>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessageReader.Capacity">
            <summary>
              Gets the capacity of the receive FIFO in number of messages.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessageReader.FillCount">
            <summary>
              Gets the number of currently unread messages within the receive FIFO.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMessageReader.Threshold">
            <summary>
              Gets or sets the threshold for the trigger event. If the receive
              FIFO contains at least the specified number of messages, the event
              specified by a <c>AssignEvent</c> method call is set to the signaled 
              state.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Setting Threshold failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.ILinMonitor">
            <summary>
              This interface represents a LIN communication monitor and is used to 
              receive LIN messages.
              When no longer needed the LIN communication monitor object has to be 
              disposed using the IDisposable interface. 
              A LIN communication monitor can be got via method 
              <c>IBalObject.OpenSocket()</c>. Unless the CAN socket is not already 
              in use exclusively, it's possible to open several concurrently 
              communication monitors on the same socket.
            </summary>
            <remarks>
              The VCI interfaces provides access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IBalObject bal = ...
              // Open monitor on first LIN socket
              ILinMonitor monitor = bal.OpenSocket(0, typeof(ILinMonitor)) as ILinMonitor;
              
              // Initialize monitor non-exclusively
              monitor.Initialize(100, false);
              
              // Use monitor
              // ...
              
              // Dispose the objects
              monitor.Dispose();
              bal.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinMonitor.GetMessageReader">
            <summary>
              Gets a reference to a new instance of a message reader object for the 
              monitor. This message reader provides access to the monitor's receive 
              buffer.
              LIN messages received from the LIN line can be read from this object.
            </summary>
            <returns>
              A reference to the message reader of the monitor.
              When no longer needed the message reader object has to be 
              disposed using the IDisposable interface. 
            </returns>
            <remarks>
              The VCI interfaces provides access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting the message reader failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinMonitor.Initialize(System.UInt16,System.Boolean)">
            <summary>
              This method initializes the LIN monitor. This method must be called
              prior to any other method of the interface.
            </summary>
            <param name="receiveFifoSize">
              Size of the receive buffer (number of CAN messages)
            </param>
            <param name="exclusive">
              If this parameter is set to true the method tries
              to initialize the monitor for exclusive use. If set
              to false, the method initializes the monitor for
              shared access.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Monitor initialization failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
            <remarks>
              The monitor is deactivated after this method returns an must be
              activeted by an Activate() method call.
              The method can be called more than once to reconfigure the size
              of the receive or transmit FIFOs.
            </remarks>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinMonitor.Activate">
            <summary>
              This method activates the LIN monitor. After activating the channel,
              LIN messages can be received through the message reader.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Monitor activation failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
            <remarks>
              The LIN line must be started, otherwise no messages are received or
              transmitted from/to the LIN line (see also ILinControl.StartLine).
            </remarks>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.ILinMonitor.Deactivate">
            <summary>
              This method deactivates the LIN monitor. After deactivating the monitor,
              no further LIN messages are received from the LIN line.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Monitor deactivation failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.ILinMonitor.MonitorStatus">
            <summary>
              Gets the current status of the LIN monitor.
            </summary>
            <exception cref="T:Ixxat.Vci4.VciException">
              Getting channel status failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed or not initialized, yet.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinMonitorStatus">
            <summary>
              <c>LinMonitorStatus</c> represents the status of a LIN monitor.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinMonitorStatus.#ctor(System.Boolean,System.Boolean,System.Byte)">
            <summary>
              Ctor - create a LinLineStatus object
            </summary>
            <param name="activated">activated flag</param>
            <param name="rxoverrun">rx overrun flag</param>
            <param name="fifoload">fifo load</param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinMonitorStatus.ToString">
            <summary>
              This method returns a String that represents the current timing value.
            </summary>
            <returns>
              A String that represents the current bit timing value.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinMonitorStatus.IsActivated">
            <summary>
              Gets a value indicating whether the monitor is activated.
            </summary>
            <returns>
              true if the monitor is activated, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinMonitorStatus.HasFifoOverrun">
            <summary>
              Gets a value indicating if a message was lost because there was
              not enough free space for the message in the receive FIFO.
            </summary>
            <returns>
              true if a data overrun has occured, otherwise false.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinMonitorStatus.ReceiveFifoLoad">
            <summary>
              Gets the current load level of the receive FIFO in percent.
            </summary>
            <returns>
              Current load level of the receive FIFO in percent (0...100%).
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinFeatures">
            <summary>
              Enumeration of flag values that are used to signalize the features 
              supported by a LIN controller (see <c>ILinSocket</c>).
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinFeatures.Master">
            <summary>
              Indicates if the LIN master mode is supported
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinFeatures.Autorate">
            <summary>
              Indicates if automatic bitrate detection is supported
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinFeatures.ErrFrame">
            <summary>
              Indicates if reception of error frames is supported
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.Bal.Lin.LinFeatures.Busload">
            <summary>
              Indicates if bus load measurement is supported
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.IMessageFactory">
             <summary>
               The message factory is used to create different message objects
               used by the VCI interface.
               Use the static <c>VciServer</c> class to get a message factory
               object.
             </summary>
             <example>
               <code>
                 IMessageFactory factory = VciServer.Instance().MsgFactory;
            
                 // create CAN message (for transmission)
                 ICanMessage canMsg = (ICanMessage)factory.CreateMsg(typeof(ICanMessage));
                 // ...
            
                 // create CAN-FD message (for transmission)
                 ICanMessage2 canMsg = (ICanMessage2)factory.CreateMsg(typeof(ICanMessage2));
                 // ...
            
                 // create LIN message (for transmission)
                 ILinMessage message = (ICanMessage)factory.CreateMsg(typeof(ILinMessage));
                 // ...
               </code>
             </example>
        </member>
        <member name="M:Ixxat.Vci4.IMessageFactory.CreateMsg(System.Type)">
            <summary>
              Creates a message object denoted by the message interface type.
            </summary>
            <param name="msgtyp">Use typeof(ICanMessage), typeof(ICanMessage2) or typeof(ILinMessage)</param>
            <returns>
              Message object.
            </returns>
            <exception cref="T:System.ArgumentException">
              Requested message type not supported.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.IVciCtrlInfo">
             <summary>
               This struct contains the bus type and controller type of a device's
               fieldbus controller. An array of such structs can be obtained from
               property <c>IVciDevice.Equipment</c>.
             </summary>
             <example>
               <code>
                 //
                 // Get device manager from VCI server
                 //
                 deviceManager = VciServer.Instance().DeviceManager;
            
                 //
                 // Get the list of installed VCI devices
                 //
                 deviceList = deviceManager.GetDeviceList();
            
                 //
                 // Get enumerator for the list of devices
                 //
                 deviceEnum = deviceList.GetEnumerator();
            
                 //
                 // Get first device
                 //
                 deviceEnum.MoveNext();
                 mDevice = deviceEnum.Current as IVciDevice;
            
                 //
                 // print bus type and controller type of first controller
                 //
                 IVciCtrlInfo info = mDevice.Equipment[0];
                 Console.Write(" BusType    : {0}\n", info.BusType);
                 Console.Write(" CtrlType   : {0}\n", info.ControllerType);
               </code>
             </example>
        </member>
        <member name="P:Ixxat.Vci4.IVciCtrlInfo.BusType">
            <summary>
              Get's the type of the supported fieldbus.
            </summary>
        </member>
        <member name="P:Ixxat.Vci4.IVciCtrlInfo.ControllerType">
            <summary>
              Get's the type of the fieldbus controller. Because the actual data type 
              property depends in the bus type, the retrieved value is boxed into an
              object reference. The calling method has to cast it to the appropriate
              data type. For a CAN bus controller (<c>BusType</c> = 
              <c>VciBusType.Can</c>) the actual data type of property 
              <c>ControllerType</c> is <c>CanCtrlType</c>.
              This property can be a null reference if the <c>BusType</c> is 
              unknown.
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.IVciDevice">
            <summary>
              This interface represents a VCI device object.
              When no longer needed the VCI device object has to be disposed using 
              the IDisposable interface. 
              Get a VCI device object via the device list of <c>IVciDeviceManager</c>.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IVciDeviceManager deviceManager = VciServer.Instance().DeviceManager;
              IVciDeviceList devices = deviceManager.GetDeviceList();
              foreach(IVciDevice device in devices)
              {
                // Use device here
                // ...
                // Dispose object to release native resources
                device.Dispose();
              }
              devices.Dispose();
              deviceManager.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.IVciDevice.OpenBusAccessLayer">
            <summary>
              This method is called to open the Bus Access Layer.
            </summary>
            <returns>
              If succeeded a reference to the Bus Access Layer, otherwise a null 
              reference (Nothing in VisualBasic).
              When no longer needed the BAL object has to be disposed using the 
              IDisposable interface. 
            </returns>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDevice.VciObjectId">
            <summary>
              Gets the unique VCI object id of the device.
            </summary>
            <returns>
              Unique VCI object id of the device.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDevice.DeviceClass">
            <summary>
              Gets the ID of the device class. Each device driver identifies its device 
              class in the form of a globally unique ID (GUID). Different adapters 
              belong to different device classes. Applications can use the device 
              class to distinguish between an IPC-I165/PCI and a PC-I04/PCI card, for 
              example.
            </summary>
            <returns>
              ID of the device class.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDevice.DriverVersion">
            <summary>
              Gets the version of the VCI device driver.
            </summary>
            <returns>
              Version of the VCI device driver.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDevice.HardwareVersion">
            <summary>
              Gets the version of the VCI device hardware.
            </summary>
            <returns>
              Version of the VCI device hardware.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDevice.UniqueHardwareId">
            <summary>
              Gets the unique ID of the adapter. Each adapter has a unique ID that can 
              be used to distinguish between two PC-I04/PCI cards, for example. 
              Because this value can be either a GUID or a string with the serial 
              number the retrieved value is either a string reference or a boxed Guid 
              instance. 
            </summary>
            <returns>
              Unique hardware id of the device.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDevice.Description">
            <summary>
              Gets the device description string.
            </summary>
            <returns>
              The device description string.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDevice.Manufacturer">
            <summary>
              Gets the device manufacturer string.
            </summary>
            <returns>
              The device manufacturer string.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDevice.Equipment">
            <summary>
              Gets a description of the hardware equipment of the device.
            </summary>
            <returns>
              The retrieved array contains a <c>VciCtrlInfo</c> for each 
              existing fieldbus controller.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.IVciDeviceList">
            <summary>
              This interface represents the list of installed VCI devices.
              When no longer needed the VCI device list object has to be disposed 
              using the IDisposable interface. 
              To observe changes within this list use the <c>AssignEvent</c> methods 
              to register an event. This event is set to the signaled state whenever 
              the contents of the device list changes.
              Use <c>GetEnumerator()</c> to enumerate the list of VCI device objects
              whereas each VCI device object can be accessed by it's <c>IVciDevice</c> 
              interface.
              The enumerator object returned by <c>GetEnumerator()</c> also has to be
              disposed using the IDisposable interface. 
              Excplicitly disposing the enumerator object can be omitted when using 
              the C# foreach statement. foreach implicitly disposes the enumerator.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IVciDeviceManager deviceManager = VciServer.Instance().DeviceManager;
              IVciDeviceList devices = deviceManager.GetDeviceList();
              foreach(IVciDevice device in devices)
              {
                // Use device here
                // ...
                // Dispose object to release native resources
                device.Dispose();
              }
              devices.Dispose();
              deviceManager.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.IVciDeviceList.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
              This method assigns an event object to the list. The event is
              set to the signaled state whenever the contents of the device list
              changes.
            </summary>
            <param name="changeEvent">
              The event object which is to be set whenever the contents of the device 
              list changes.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter changeEvent was a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.IVciDeviceList.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
              This method assigns an event object to the list. The event is
              set to the signaled state whenever the contents of the device list
              changes.
            </summary>
            <param name="changeEvent">
              The event object which is to be set whenever the contents of the device 
              list changes.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter changeEvent was a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.IVciDeviceManager">
            <summary>
              The VCI device manager manages the list of VCI device objects.
              Use the static <c>VciServer</c> class to get a VCI device manager
              object.
              When no longer needed the VCI device manager object has to be disposed 
              using the IDisposable interface. 
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IVciDeviceManager deviceManager = VciServer.Instance().DeviceManager;
              // Use deviceManager here
              // ...
              // Dispose object to release native resources
              deviceManager.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.IVciDeviceManager.GetDeviceList">
            <summary>
              Gets the list of VCI device objects represeted by a
              <c>IVciDeviceList</c> interface.
            </summary>
            <returns>
              The list of VCI device objects represeted by a <c>IVciDeviceList</c>
              interface.
            </returns>
            <exception cref="T:Ixxat.Vci4.VciException">
              Thrown if creation of the device list failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.IVciDriver">
            <summary>
              This interface represents a VCI driver object.
              When no longer needed the VCI driver object has to be disposed using 
              the IDisposable interface. 
              Get a VCI driver object via the driver list of <c>IVciDriverManager</c>.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IVciDriverManager driverManager = VciServer.Instance().DriverManager;
              IVciDriverList drivers = driverManager.GetDriverList();
              foreach(IVciDriver driver in drivers)
              {
                // Use driver here
                // ...
                // Dispose object to release native resources
                driver.Dispose();
              }
              drivers.Dispose();
              driverManager.Dispose();
              </code>
            </example>
        </member>
        <member name="P:Ixxat.Vci4.IVciDriver.VciObjectId">
            <summary>
              Gets the unique VCI object id of the driver.
            </summary>
            <returns>
              Unique VCI object id of the driver.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDriver.DriverClass">
            <summary>
              Gets the class id of the VCI driver object.
            </summary>
            <returns>
              Unique VCI driver class id.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciDriver.DriverVersion">
            <summary>
              Gets the version of the VCI driver.
            </summary>
            <returns>
              The version of the VCI driver.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.IVciDriverList">
            <summary>
              This interface represents the list of installed VCI drivers.
              When no longer needed the VCI driver list object has to be disposed 
              using the IDisposable interface. 
              To observe changes within this list use the <c>AssignEvent</c> methods 
              to register an event. This event is set to the signaled state whenever 
              the contents of the driver list changes.
              Use <c>GetEnumerator</c> to enumerate the list of VCI driver objects
              whereas each VCI driver object can be accessed by it's <c>IVciDriver</c> 
              interface.
              The enumerator object returned by <c>GetEnumerator</c> also has to be
              disposed using the IDisposable interface. 
              Excplicitly disposing the enumerator object can be omitted when using 
              the C# foreach statement. foreach implicitly disposes the enumerator.
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IVciDriverManager driverManager = VciServer.Instance().DriverManager;
              IVciDriverList drivers = driverManager.GetDriverList();
              foreach(IVciDriver driver in drivers)
              {
                // Use driver here
                // ...
                // Dispose object to release native resources
                driver.Dispose();
              }
              drivers.Dispose();
              driverManager.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.IVciDriverList.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
              This method assigns an event object to the list. The event is
              set to the signaled state whenever the contents of the driver list
              changes.
            </summary>
            <param name="changeEvent">
              The event object which is to be set whenever the contents of the driver 
              list changes.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter changeEvent was a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="M:Ixxat.Vci4.IVciDriverList.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
              This method assigns an event object to the list. The event is
              set to the signaled state whenever the contents of the driver list
              changes.
            </summary>
            <param name="changeEvent">
              The event object which is to be set whenever the contents of the driver 
              list changes.
            </param>
            <exception cref="T:Ixxat.Vci4.VciException">
              Assigning the event failed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter changeEvent was a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.IVciDriverManager">
            <summary>
              The VCI driver manager manages the list of VCI driver objects.
              Use the static <c>VciServer</c> class to get a VCI driver manager
              object.
              When no longer needed the VCI driver manager object has to be disposed 
              using the IDisposable interface. 
            </summary>
            <remarks>
              The VCI interfaces provide access to native driver resources. Because the 
              .NET garbage collector is only designed to manage memory, but not 
              native OS and driver resources the caller is responsible to release this 
              resources via calling <c>IDisposable.Dispose()</c> when the object is no 
              longer needed. Otherwise native memory and resource leaks may occure.
            </remarks>
            <example>
              <code>
              IVciDriverManager driverManager = VciServer.Instance().DriverManager;
              // Use driverManager here
              // ...
              // Dispose object to release native resources
              driverManager.Dispose();
              </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci4.IVciDriverManager.GetDriverList">
            <summary>
              Gets the list of VCI driver objects represeted by a 
              <c>IVciDriverList</c> interface.
            </summary>
            <returns>
              The list of VCI driver objects represeted by a <c>IVciDriverList</c>
              interface.
            </returns>
            <exception cref="T:Ixxat.Vci4.VciException">
              Thrown if creation of the driver list failed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              Object is already disposed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.IVciServer">
            <summary>
              This class represents the entry point for working with the VCI. 
              Use <c>GetDriverManager</c> to get access to the installed VCI drivers.
              Use <c>GetDeviceManager</c> to get access to the installed VCI devices.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.IVciServer.GetErrorMsg(System.Int32)">
            <summary>
            Get VCI error message
            </summary>
            <param name="errorCode">Error code</param>
            <returns>Error string</returns>
        </member>
        <member name="P:Ixxat.Vci4.IVciServer.Version">
            <summary>
              Gets the version of the VCI server.
            </summary>
            <returns>
              The version of the VCI server.
            </returns>
            <exception cref="T:Ixxat.Vci4.VciException">
              Thrown if getting the version number failed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciServer.DriverManager">
            <summary>
              Get access to the DriverManager instance.
            </summary>
            <returns>
              Main interface of the DriverManager instance.
            </returns>
            <exception cref="T:Ixxat.Vci4.VciException">
              Thrown if getting DriverManager instance failed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciServer.DeviceManager">
            <summary>
              Get access to the DeviceManager instance.
            </summary>
            <returns>
              Main interface of the DeviceManager instance.
            </returns>
            <exception cref="T:Ixxat.Vci4.VciException">
              Thrown if getting DeviceManager instance failed.
            </exception>
        </member>
        <member name="P:Ixxat.Vci4.IVciServer.MsgFactory">
            <summary>
              Get access to the MsgFactory instance. 
              Use this instance to create message objects for transmission.
            </summary>
            <returns>
              Main interface of the MsgFactory instance.
            </returns>
            <exception cref="T:Ixxat.Vci4.VciException">
              Thrown if getting MsgFactory instance failed.
            </exception>
        </member>
        <member name="T:Ixxat.Vci4.Bal.Lin.LinBitrate">
            <summary>
              Instances of <c>LinBitrate</c> represent a bit rate for LIN busses.
              The predefined bitrates are provided as static <c>LinBitrate</c> members 
              like <c>Lin1000Baud</c>.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinBitrate.#ctor(System.UInt16)">
            <summary>
              Constructor for a new LinBitrate.
            </summary>
            <param name="bitrate">
              The bitrate in bit/sec
            </param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinBitrate.#ctor(System.UInt16,System.String)">
            <summary>
              Constructor for a new LinBitrate.
            </summary>
            <param name="bitrate">
              The bitrate in bit/sec
            </param>
            <param name="name">
              Human readable name of the bit rate.
            </param>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinBitrate.ToString">
            <summary>
              This method returns a String that represents the current timing value.
            </summary>
            <returns>
              A String that represents the current bit timing value.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinBitrate.Equals(System.Object)">
            <summary>
              Determines whether the specified Object is equal to the current Object.
            </summary>
            <pararm name ="obj">
              The Object to compare with the current Object.
            </pararm>
            <returns>
              true if the specified Object is equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinBitrate.Equals(Ixxat.Vci4.Bal.Lin.LinBitrate)">
            <summary>
              Determines whether the specified Object is equal to the current Object.
            </summary>
            <pararm name ="other">
              The Object to compare with the current Object.
            </pararm>
            <returns>
              true if the specified Object is equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinBitrate.op_Equality(Ixxat.Vci4.Bal.Lin.LinBitrate,Ixxat.Vci4.Bal.Lin.LinBitrate)">
            <summary>
              Comparison operator ==
            </summary>
            <pararm name ="lhs">
              left hand side object to compare
            </pararm>
            <pararm name ="rhs">
              right hand side object to compare
            </pararm>
            <returns>
              true if the specified Object is equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinBitrate.op_Inequality(Ixxat.Vci4.Bal.Lin.LinBitrate,Ixxat.Vci4.Bal.Lin.LinBitrate)">
            <summary>
              Comparison operator !=
            </summary>
            <pararm name ="lhs">
              left hand side object to compare
            </pararm>
            <pararm name ="rhs">
              right hand side object to compare
            </pararm>
            <returns>
              true if the specified Object is not equal to the current Object; 
              otherwise, false.
            </returns>
        </member>
        <member name="M:Ixxat.Vci4.Bal.Lin.LinBitrate.GetHashCode">
            <summary>
              Serves as a hash function for a particular type. GetHashCode is suitable 
              for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
              A hash code for the current Object. 
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.AsUInt16">
            <summary>
              Gets the 16 bit value of this LinBitrate structure.
            </summary>
            <returns>
              The 16 bit value of this LinBitrate structure.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Name">
            <summary>
              Gets the name of this bitrate.
            </summary>
            <returns>
              The name of this bitrate.
            </returns>
            <remarks>
              This property returns either the user defined name of the bit rate,
              if the bit rate was created with a name, or the name of the known
              bit rate. For custom bit rates without a user defined name, the
              property returns the bit timing value as numeric string.
            </remarks>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Undefined">
            <summary>
              Gets an undefined bit timing value.
            </summary>
            <returns>
              Undefined bit timing value.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.AutoRate">
            <summary>
              Gets the bit timing value used for automatic bitrate detection in 
              <c>ILinControl.InitLine</c>.
            </summary>
            <returns>
              Bit timing value used for automatic bitrate detection.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.MinBitrate">
            <summary>
              Gets the bit timing value for the predefined lowest LIN bitrate.
            </summary>
            <returns>
              Bit timing value for the predefined lowest LIN bitrate.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.MaxBitrate">
            <summary>
              Gets the bit timing value for the predefined highest LIN bitrate.
            </summary>
            <returns>
              Bit timing value for the predefined highest LIN bitrate.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Lin1000Bit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 1000 bit/s.
            </summary>
            <returns>
              Bit timing value for the predefined bit rate of 1000 bit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Lin1200Bit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 1200 bit/s.
            </summary>
            <returns>
              Bit timing value for the predefined bit rate of 1200 bit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Lin2400Bit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 2400 bit/s.
            </summary>
            <returns>
              Bit timing value for the predefined bit rate of 2400 bit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Lin4800Bit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 4800 bit/s.
            </summary>
            <returns>
              Bit timing value for the predefined bit rate of 4800 bit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Lin9600Bit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 9600 bit/s.
            </summary>
            <returns>
              Bit timing value for the predefined bit rate of 9600 bit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Lin10400Bit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 10400 bit/s.
            </summary>
            <returns>
              Bit timing value for the predefined bit rate of 10400 bit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Lin19200Bit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 19200 bit/s.
            </summary>
            <returns>
              Bit timing value for the predefined bit rate of 19200 bit/s.
            </returns>
        </member>
        <member name="P:Ixxat.Vci4.Bal.Lin.LinBitrate.Lin20000Bit">
            <summary>
              Gets the bit timing value for the predefined bit rate of 20000 bit/s.
            </summary>
            <returns>
              Bit timing value for the predefined bit rate of 20000 bit/s.
            </returns>
        </member>
        <member name="T:Ixxat.Vci4.VciBusType">
            <summary>
              Enumeration of VCI bus types
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciBusType.Unknown">
            <summary>
              reserved / unknown
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciBusType.Can">
            <summary>
              CAN bus
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciBusType.FlexRay">
            <summary>
              FlexRay bus
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciBusType.Lin">
            <summary>
              LIN bus
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.VciError">
            <summary>
              VciError holds VCI error constants.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_SUCCESS">
            <summary>
             The operation completed successfully.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_OK">
            <summary>
             The operation completed successfully.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_UNEXPECTED">
            <summary>
            Unexpected failure
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_NOT_IMPLEMENTED">
            <summary>
             Not implemented
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_OUTOFMEMORY">
            <summary>
             Not enough storage is available to complete this operation.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_INVALIDARG">
            <summary>
             One or more parameters are invalid.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_NOINTERFACE">
            <summary>
             The object does not support the requested interface
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_INVPOINTER">
            <summary>
             Invalid pointer
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_INVHANDLE">
            <summary>
             Invalid handle
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_ABORT">
            <summary>
             Operation aborted
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_FAIL">
            <summary>
             Unspecified error
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_ACCESSDENIED">
            <summary>
             Access is denied.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_TIMEOUT">
            <summary>
             This operation returned because the timeout period expired.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_BUSY">
            <summary>
             The requested resource is currently busy.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_PENDING">
            <summary>
             The data necessary to complete this operation is not yet available.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_NO_DATA">
            <summary>
             No more data available.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_NO_MORE_ITEMS">
            <summary>
             No more entries are available from an enumeration operation.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_NOT_INITIALIZED">
            <summary>
             The component is not initialized.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_ALREADY_INITIALIZED">
            <summary>
             An attempt was made to reinitialize an already initialized component.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_RXQUEUE_EMPTY">
            <summary>
             Receive queue empty.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_TXQUEUE_FULL">
            <summary>
             Transmit queue full.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_BUFFER_OVERFLOW">
            <summary>
             The data was too large to fit into the specified buffer.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_INVALID_STATE">
            <summary>
             The component is not in a valid state to perform this request.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_OBJECT_ALREADY_EXISTS">
            <summary>
             The object already exists.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_INVALID_INDEX">
            <summary>
             An attempt was made to access an array outside of its bounds.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_END_OF_FILE">
            <summary>
             The end-of-file marker has been reached.
             There is no valid data in the file beyond this marker.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_DISCONNECTED">
            <summary>
            Attempt to send a message to a disconnected communication port.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_INVALID_FIRMWARE">
            <summary>
            Invalid firmware version or version not supported.
            Check driver version and/or update firmware.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_WRONG_FLASHFWVERSION">
            <summary>
            Invalid firmware version or version not supported.
            Check driver version and/or update firmware.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_INVALID_LICENSE">
            <summary>
            Invalid license.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_NO_SUCH_LICENSE">
            <summary>
            There is no license available.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_LICENSE_EXPIRED">
            <summary>
            The time limited license has expired.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_LICENSE_QUOTA_EXCEEDED">
            <summary>
            The service request exceeds the license quota.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_INVALID_TIMING">
            <summary>
            Invalid bit timing parameter.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_IN_USE">
            <summary>
            The resource requested is already in use.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_NO_SUCH_DEVICE">
            <summary>
             A device which does not exist was specified.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_DEVICE_NOT_CONNECTED">
            <summary>
             The device is not connected.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_DEVICE_NOT_READY">
            <summary>
            The device is not ready for use.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_TYPE_MISMATCH">
            <summary>
            Mismatch between the type of object required by the operation
            and the type of object specified in the request.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_NOT_SUPPORTED">
            <summary>
            The request is not supported.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_DUPLICATE_OBJECTID">
            <summary>
            The attempt to insert the object ID in the index failed
            because the object ID is already in the index.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_OBJECTID_NOT_FOUND">
            <summary>
            The specified object ID was not found.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_WRONG_LEVEL">
            <summary>
            The requested operation was called from a wrong execution level.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_WRONG_DRV_VERSION">
            <summary>
            Incompatible version of the VCI device driver.
            </summary>
        </member>
        <member name="F:Ixxat.Vci4.VciError.VCI_E_LUIDS_EXHAUSTED">
            <summary>
            Indicates there are no more LUIDs to allocate.
            </summary>
        </member>
        <member name="T:Ixxat.Vci4.VciException">
            <summary>
              This class implements the basic VCI exception object.
            </summary>
        </member>
        <member name="M:Ixxat.Vci4.VciException.#ctor(Ixxat.Vci4.IVciServer)">
            <summary>
            create a VCI exception
            </summary>
            <param name="server">Server instance to get error string from</param>
        </member>
        <member name="M:Ixxat.Vci4.VciException.#ctor(Ixxat.Vci4.IVciServer,System.Int32)">
            <summary>
            create a VCI exception
            </summary>
            <param name="server">Server instance to get error string from</param>
            <param name="errorCode">Error code</param>
        </member>
        <member name="M:Ixxat.Vci4.VciException.#ctor(System.String)">
            <summary>
            create a VCI exception
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Ixxat.Vci4.VciException.#ctor(Ixxat.Vci4.IVciServer,System.String,System.Int32)">
            <summary>
            create a VCI exception
            </summary>
            <param name="server">Server instance to get error string from</param>
            <param name="msgappend">Message to append</param>
            <param name="errorCode">Error code</param>
        </member>
        <member name="M:Ixxat.Vci4.VciException.#ctor(System.String,System.Exception)">
            <summary>
            create a VCI exception
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
    </members>
</doc>
